/*******************************************************************************
 * ip_Una_Una
 * @argument {Una} a
 * @argument {Una} b
 * @returns {float}
 ******************************************************************************/
inline float operator | (const Una &a, const Una &b) {
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r
  // 4 muls / 3 adds
  return a[4]*b[4]-a[0]*b[0]-a[1]*b[1]-a[2]*b[2];
}

/*******************************************************************************
 * gp_Una_Una
 * @argument {Una} a
 * @argument {Una} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Una &a, const Una &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 24 muls / 13 adds
  res[0]=a[4]*b[4]-a[0]*b[0]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[0]*b[1]-a[1]*b[0];
  res[2]=a[0]*b[2]-a[2]*b[0];
  res[3]=a[0]*b[3]-a[3]*b[0];
  res[4]=a[0]*b[4]-a[4]*b[0];
  res[5]=a[1]*b[2]-a[2]*b[1];
  res[6]=a[1]*b[3]-a[3]*b[1];
  res[7]=a[1]*b[4]-a[4]*b[1];
  res[8]=a[2]*b[3]-a[3]*b[2];
  res[9]=a[2]*b[4]-a[4]*b[2];
  res[10]=a[3]*b[4]-a[4]*b[3];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Una_Bi
 * @argument {Una} a
 * @argument {Bi} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Una &a, const Bi &b) {
  Una res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 16 muls / 14 adds
  res[0]=a[1]*b[0]+a[2]*b[1]-a[4]*b[3];
  res[1]=a[2]*b[4]-a[0]*b[0]-a[4]*b[6];
  res[2]=-a[0]*b[1]-a[1]*b[4]-a[4]*b[8];
  res[3]=-a[0]*b[2]-a[1]*b[5]-a[2]*b[7]-a[4]*b[9];
  res[4]=-a[0]*b[3]-a[1]*b[6]-a[2]*b[8];
  return res;
}

/*******************************************************************************
 * gp_Una_Bi
 * @argument {Una} a
 * @argument {Bi} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Una &a, const Bi &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 46 muls / 34 adds
  res[0]=a[1]*b[0]+a[2]*b[1]-a[4]*b[3];
  res[1]=a[2]*b[4]-a[0]*b[0]-a[4]*b[6];
  res[2]=-a[0]*b[1]-a[1]*b[4]-a[4]*b[8];
  res[3]=-a[0]*b[2]-a[1]*b[5]-a[2]*b[7]-a[4]*b[9];
  res[4]=-a[0]*b[3]-a[1]*b[6]-a[2]*b[8];
  res[5]=a[0]*b[4]+a[2]*b[0]-a[1]*b[1];
  res[6]=a[0]*b[5]+a[3]*b[0]-a[1]*b[2];
  res[7]=a[0]*b[6]+a[4]*b[0]-a[1]*b[3];
  res[8]=a[0]*b[7]+a[3]*b[1]-a[2]*b[2];
  res[9]=a[0]*b[8]+a[4]*b[1]-a[2]*b[3];
  res[10]=a[0]*b[9]+a[4]*b[2]-a[3]*b[3];
  res[11]=a[1]*b[7]+a[3]*b[4]-a[2]*b[5];
  res[12]=a[1]*b[8]+a[4]*b[4]-a[2]*b[6];
  res[13]=a[1]*b[9]+a[4]*b[5]-a[3]*b[6];
  res[14]=a[2]*b[9]+a[4]*b[7]-a[3]*b[8];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Una_Tri
 * @argument {Una} a
 * @argument {Tri} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator | (const Una &a, const Tri &b) {
  Bi res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 24 muls / 16 adds
  res[0]=a[4]*b[2]-a[2]*b[0];
  res[1]=a[1]*b[0]+a[4]*b[4];
  res[2]=a[1]*b[1]+a[2]*b[3]+a[4]*b[5];
  res[3]=a[1]*b[2]+a[2]*b[4];
  res[4]=a[4]*b[7]-a[0]*b[0];
  res[5]=a[2]*b[6]+a[4]*b[8]-a[0]*b[1];
  res[6]=a[2]*b[7]-a[0]*b[2];
  res[7]=a[4]*b[9]-a[0]*b[3]-a[1]*b[6];
  res[8]=-a[0]*b[4]-a[1]*b[7];
  res[9]=-a[0]*b[5]-a[1]*b[8]-a[2]*b[9];
  return res;
}

/*******************************************************************************
 * gp_Una_Tri
 * @argument {Una} a
 * @argument {Tri} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Una &a, const Tri &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 44 muls / 31 adds
  res[0]=0.0;
  res[1]=a[4]*b[2]-a[2]*b[0];
  res[2]=a[1]*b[0]+a[4]*b[4];
  res[3]=a[1]*b[1]+a[2]*b[3]+a[4]*b[5];
  res[4]=a[1]*b[2]+a[2]*b[4];
  res[5]=a[4]*b[7]-a[0]*b[0];
  res[6]=a[2]*b[6]+a[4]*b[8]-a[0]*b[1];
  res[7]=a[2]*b[7]-a[0]*b[2];
  res[8]=a[4]*b[9]-a[0]*b[3]-a[1]*b[6];
  res[9]=-a[0]*b[4]-a[1]*b[7];
  res[10]=-a[0]*b[5]-a[1]*b[8]-a[2]*b[9];
  res[11]=a[0]*b[6]+a[2]*b[1]-a[1]*b[3]-a[3]*b[0];
  res[12]=a[0]*b[7]+a[2]*b[2]-a[1]*b[4]-a[4]*b[0];
  res[13]=a[0]*b[8]+a[3]*b[2]-a[1]*b[5]-a[4]*b[1];
  res[14]=a[0]*b[9]+a[3]*b[4]-a[2]*b[5]-a[4]*b[3];
  res[15]=a[1]*b[9]+a[3]*b[7]-a[2]*b[8]-a[4]*b[6];
  return res;
}

/*******************************************************************************
 * ip_Una_Quad
 * @argument {Una} a
 * @argument {Quad} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator | (const Una &a, const Quad &b) {
  Tri res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 16 muls / 12 adds
  res[0]=-a[4]*b[1];
  res[1]=-a[2]*b[0]-a[4]*b[2];
  res[2]=-a[2]*b[1];
  res[3]=a[1]*b[0]-a[4]*b[3];
  res[4]=a[1]*b[1];
  res[5]=a[1]*b[2]+a[2]*b[3];
  res[6]=-a[0]*b[0]-a[4]*b[4];
  res[7]=-a[0]*b[1];
  res[8]=a[2]*b[4]-a[0]*b[2];
  res[9]=-a[0]*b[3]-a[1]*b[4];
  return res;
}

/*******************************************************************************
 * gp_Una_Quad
 * @argument {Una} a
 * @argument {Quad} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Una &a, const Quad &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 21 muls / 16 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=0.0;
  res[4]=0.0;
  res[5]=-a[4]*b[1];
  res[6]=-a[2]*b[0]-a[4]*b[2];
  res[7]=-a[2]*b[1];
  res[8]=a[1]*b[0]-a[4]*b[3];
  res[9]=a[1]*b[1];
  res[10]=a[1]*b[2]+a[2]*b[3];
  res[11]=-a[0]*b[0]-a[4]*b[4];
  res[12]=-a[0]*b[1];
  res[13]=a[2]*b[4]-a[0]*b[2];
  res[14]=-a[0]*b[3]-a[1]*b[4];
  res[15]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Una_Pent
 * @argument {Una} a
 * @argument {Pent} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator | (const Una &a, const Pent &b) {
  Quad res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 4 muls / 2 adds
  res[0]=a[4]*b[0];
  res[1]=0.0;
  res[2]=-a[2]*b[0];
  res[3]=a[1]*b[0];
  res[4]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Una_Pent
 * @argument {Una} a
 * @argument {Pent} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator * (const Una &a, const Pent &b) {
  Quad res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 4 muls / 2 adds
  res[0]=a[4]*b[0];
  res[1]=0.0;
  res[2]=-a[2]*b[0];
  res[3]=a[1]*b[0];
  res[4]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Una_Even
 * @argument {Una} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Una &a, const Even &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 37 muls / 28 adds
  res[0]=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]-a[4]*b[4];
  res[1]=a[1]*b[0]+a[2]*b[5]-a[0]*b[1]-a[4]*b[7];
  res[2]=a[2]*b[0]-a[0]*b[2]-a[1]*b[5]-a[4]*b[9];
  res[3]=a[3]*b[0]-a[0]*b[3]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10];
  res[4]=a[4]*b[0]-a[0]*b[4]-a[1]*b[7]-a[2]*b[9];
  res[5]=-a[4]*b[12];
  res[6]=-a[2]*b[11]-a[4]*b[13];
  res[7]=-a[2]*b[12];
  res[8]=a[1]*b[11]-a[4]*b[14];
  res[9]=a[1]*b[12];
  res[10]=a[1]*b[13]+a[2]*b[14];
  res[11]=-a[0]*b[11]-a[4]*b[15];
  res[12]=-a[0]*b[12];
  res[13]=a[2]*b[15]-a[0]*b[13];
  res[14]=-a[0]*b[14]-a[1]*b[15];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Una_Even
 * @argument {Una} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Una &a, const Even &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 72 muls / 56 adds
  res[0]=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]-a[4]*b[4];
  res[1]=a[1]*b[0]+a[2]*b[5]-a[0]*b[1]-a[4]*b[7];
  res[2]=a[2]*b[0]-a[0]*b[2]-a[1]*b[5]-a[4]*b[9];
  res[3]=a[3]*b[0]-a[0]*b[3]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10];
  res[4]=a[4]*b[0]-a[0]*b[4]-a[1]*b[7]-a[2]*b[9];
  res[5]=a[0]*b[5]+a[2]*b[1]-a[1]*b[2]-a[4]*b[12];
  res[6]=a[0]*b[6]+a[3]*b[1]-a[1]*b[3]-a[2]*b[11]-a[4]*b[13];
  res[7]=a[0]*b[7]+a[4]*b[1]-a[1]*b[4]-a[2]*b[12];
  res[8]=a[0]*b[8]+a[1]*b[11]+a[3]*b[2]-a[2]*b[3]-a[4]*b[14];
  res[9]=a[0]*b[9]+a[1]*b[12]+a[4]*b[2]-a[2]*b[4];
  res[10]=a[0]*b[10]+a[1]*b[13]+a[2]*b[14]+a[4]*b[3]-a[3]*b[4];
  res[11]=a[1]*b[8]+a[3]*b[5]-a[0]*b[11]-a[2]*b[6]-a[4]*b[15];
  res[12]=a[1]*b[9]+a[4]*b[5]-a[0]*b[12]-a[2]*b[7];
  res[13]=a[1]*b[10]+a[2]*b[15]+a[4]*b[6]-a[0]*b[13]-a[3]*b[7];
  res[14]=a[2]*b[10]+a[4]*b[8]-a[0]*b[14]-a[1]*b[15]-a[3]*b[9];
  res[15]=a[0]*b[15]+a[2]*b[13]+a[4]*b[11]-a[1]*b[14]-a[3]*b[12];
  return res;
}

/*******************************************************************************
 * ip_Una_Odd
 * @argument {Una} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Una &a, const Odd &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 32 muls / 21 adds
  res[0]=a[4]*b[4]-a[0]*b[0]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[4]*b[7]-a[2]*b[5];
  res[2]=a[1]*b[5]+a[4]*b[9];
  res[3]=a[1]*b[6]+a[2]*b[8]+a[4]*b[10];
  res[4]=a[1]*b[7]+a[2]*b[9];
  res[5]=a[4]*b[12]-a[0]*b[5];
  res[6]=a[2]*b[11]+a[4]*b[13]-a[0]*b[6];
  res[7]=a[2]*b[12]-a[0]*b[7];
  res[8]=a[4]*b[14]-a[0]*b[8]-a[1]*b[11];
  res[9]=-a[0]*b[9]-a[1]*b[12];
  res[10]=-a[0]*b[10]-a[1]*b[13]-a[2]*b[14];
  res[11]=a[4]*b[15];
  res[12]=0.0;
  res[13]=-a[2]*b[15];
  res[14]=a[1]*b[15];
  res[15]=-a[0]*b[15];
  return res;
}

/*******************************************************************************
 * gp_Una_Odd
 * @argument {Una} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Una &a, const Odd &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 72 muls / 56 adds
  res[0]=a[4]*b[4]-a[0]*b[0]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[0]*b[1]+a[4]*b[7]-a[1]*b[0]-a[2]*b[5];
  res[2]=a[0]*b[2]+a[1]*b[5]+a[4]*b[9]-a[2]*b[0];
  res[3]=a[0]*b[3]+a[1]*b[6]+a[2]*b[8]+a[4]*b[10]-a[3]*b[0];
  res[4]=a[0]*b[4]+a[1]*b[7]+a[2]*b[9]-a[4]*b[0];
  res[5]=a[1]*b[2]+a[4]*b[12]-a[0]*b[5]-a[2]*b[1];
  res[6]=a[1]*b[3]+a[2]*b[11]+a[4]*b[13]-a[0]*b[6]-a[3]*b[1];
  res[7]=a[1]*b[4]+a[2]*b[12]-a[0]*b[7]-a[4]*b[1];
  res[8]=a[2]*b[3]+a[4]*b[14]-a[0]*b[8]-a[1]*b[11]-a[3]*b[2];
  res[9]=a[2]*b[4]-a[0]*b[9]-a[1]*b[12]-a[4]*b[2];
  res[10]=a[3]*b[4]-a[0]*b[10]-a[1]*b[13]-a[2]*b[14]-a[4]*b[3];
  res[11]=a[0]*b[11]+a[2]*b[6]+a[4]*b[15]-a[1]*b[8]-a[3]*b[5];
  res[12]=a[0]*b[12]+a[2]*b[7]-a[1]*b[9]-a[4]*b[5];
  res[13]=a[0]*b[13]+a[3]*b[7]-a[1]*b[10]-a[2]*b[15]-a[4]*b[6];
  res[14]=a[0]*b[14]+a[1]*b[15]+a[3]*b[9]-a[2]*b[10]-a[4]*b[8];
  res[15]=a[1]*b[14]+a[3]*b[12]-a[0]*b[15]-a[2]*b[13]-a[4]*b[11];
  return res;
}

/*******************************************************************************
 * add_Una_Una
 * @argument {Una} a
 * @argument {Una} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator + (const Una &a, const Una &b) {
  Una res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 0 muls / 5 adds
  res[0]=a[0]+b[0];
  res[1]=a[1]+b[1];
  res[2]=a[2]+b[2];
  res[3]=a[3]+b[3];
  res[4]=a[4]+b[4];
  return res;
}

/*******************************************************************************
 * sub_Una_Una
 * @argument {Una} a
 * @argument {Una} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator - (const Una &a, const Una &b) {
  Una res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 0 muls / 5 adds
  res[0]=a[0]-b[0];
  res[1]=a[1]-b[1];
  res[2]=a[2]-b[2];
  res[3]=a[3]-b[3];
  res[4]=a[4]-b[4];
  return res;
}

/*******************************************************************************
 * reverse_Una
 * @argument {Una} a
 * @returns {Una}
 ******************************************************************************/
inline Una operator ~ (const Una &a) {
  Una res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 0 muls / 0 adds
  res[0]=a[0];
  res[1]=a[1];
  res[2]=a[2];
  res[3]=a[3];
  res[4]=a[4];
  return res;
}

/*******************************************************************************
 * gp_Una_float
 * @argument {Una} a
 * @argument {float} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator * (const Una &a, const float &b) {
  Una res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 5 muls / 0 adds
  res[0]=a[0]*b;
  res[1]=a[1]*b;
  res[2]=a[2]*b;
  res[3]=a[3]*b;
  res[4]=a[4]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Una
 * @argument {float} a
 * @argument {Una} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator * (const float &a, const Una &b) {
  Una res;
  // a
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 5 muls / 0 adds
  res[0]=a*b[0];
  res[1]=a*b[1];
  res[2]=a*b[2];
  res[3]=a*b[3];
  res[4]=a*b[4];
  return res;
}

/*******************************************************************************
 * ip_Bi_Una
 * @argument {Bi} a
 * @argument {Una} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Bi &a, const Una &b) {
  Una res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 16 muls / 11 adds
  res[0]=a[3]*b[4]-a[0]*b[1]-a[1]*b[2];
  res[1]=a[0]*b[0]+a[6]*b[4]-a[4]*b[2];
  res[2]=a[1]*b[0]+a[4]*b[1]+a[8]*b[4];
  res[3]=a[2]*b[0]+a[5]*b[1]+a[7]*b[2]+a[9]*b[4];
  res[4]=a[3]*b[0]+a[6]*b[1]+a[8]*b[2];
  return res;
}

/*******************************************************************************
 * gp_Bi_Una
 * @argument {Bi} a
 * @argument {Una} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Bi &a, const Una &b) {
  Odd res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 46 muls / 31 adds
  res[0]=a[3]*b[4]-a[0]*b[1]-a[1]*b[2];
  res[1]=a[0]*b[0]+a[6]*b[4]-a[4]*b[2];
  res[2]=a[1]*b[0]+a[4]*b[1]+a[8]*b[4];
  res[3]=a[2]*b[0]+a[5]*b[1]+a[7]*b[2]+a[9]*b[4];
  res[4]=a[3]*b[0]+a[6]*b[1]+a[8]*b[2];
  res[5]=a[0]*b[2]+a[4]*b[0]-a[1]*b[1];
  res[6]=a[0]*b[3]+a[5]*b[0]-a[2]*b[1];
  res[7]=a[0]*b[4]+a[6]*b[0]-a[3]*b[1];
  res[8]=a[1]*b[3]+a[7]*b[0]-a[2]*b[2];
  res[9]=a[1]*b[4]+a[8]*b[0]-a[3]*b[2];
  res[10]=a[2]*b[4]+a[9]*b[0]-a[3]*b[3];
  res[11]=a[4]*b[3]+a[7]*b[1]-a[5]*b[2];
  res[12]=a[4]*b[4]+a[8]*b[1]-a[6]*b[2];
  res[13]=a[5]*b[4]+a[9]*b[1]-a[6]*b[3];
  res[14]=a[7]*b[4]+a[9]*b[2]-a[8]*b[3];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Bi_Bi
 * @argument {Bi} a
 * @argument {Bi} b
 * @returns {float}
 ******************************************************************************/
inline float operator | (const Bi &a, const Bi &b) {
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r
  // 6 muls / 5 adds
  return a[3]*b[3]+a[6]*b[6]+a[8]*b[8]-a[0]*b[0]-a[1]*b[1]-a[4]*b[4];
}

/*******************************************************************************
 * gp_Bi_Bi
 * @argument {Bi} a
 * @argument {Bi} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Bi &a, const Bi &b) {
  Even res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 84 muls / 68 adds
  res[0]=a[3]*b[3]+a[6]*b[6]+a[8]*b[8]-a[0]*b[0]-a[1]*b[1]-a[4]*b[4];
  res[1]=a[1]*b[4]+a[6]*b[3]-a[3]*b[6]-a[4]*b[1];
  res[2]=a[4]*b[0]+a[8]*b[3]-a[0]*b[4]-a[3]*b[8];
  res[3]=a[5]*b[0]+a[7]*b[1]+a[9]*b[3]-a[0]*b[5]-a[1]*b[7]-a[3]*b[9];
  res[4]=a[6]*b[0]+a[8]*b[1]-a[0]*b[6]-a[1]*b[8];
  res[5]=a[0]*b[1]+a[8]*b[6]-a[1]*b[0]-a[6]*b[8];
  res[6]=a[0]*b[2]+a[7]*b[4]+a[9]*b[6]-a[2]*b[0]-a[4]*b[7]-a[6]*b[9];
  res[7]=a[0]*b[3]+a[8]*b[4]-a[3]*b[0]-a[4]*b[8];
  res[8]=a[1]*b[2]+a[4]*b[5]+a[9]*b[8]-a[2]*b[1]-a[5]*b[4]-a[8]*b[9];
  res[9]=a[1]*b[3]+a[4]*b[6]-a[3]*b[1]-a[6]*b[4];
  res[10]=a[2]*b[3]+a[5]*b[6]+a[7]*b[8]-a[3]*b[2]-a[6]*b[5]-a[8]*b[7];
  res[11]=a[0]*b[7]+a[2]*b[4]+a[4]*b[2]+a[7]*b[0]-a[1]*b[5]-a[5]*b[1];
  res[12]=a[0]*b[8]+a[3]*b[4]+a[4]*b[3]+a[8]*b[0]-a[1]*b[6]-a[6]*b[1];
  res[13]=a[0]*b[9]+a[3]*b[5]+a[5]*b[3]+a[9]*b[0]-a[2]*b[6]-a[6]*b[2];
  res[14]=a[1]*b[9]+a[3]*b[7]+a[7]*b[3]+a[9]*b[1]-a[2]*b[8]-a[8]*b[2];
  res[15]=a[4]*b[9]+a[6]*b[7]+a[7]*b[6]+a[9]*b[4]-a[5]*b[8]-a[8]*b[5];
  return res;
}

/*******************************************************************************
 * ip_Bi_Tri
 * @argument {Bi} a
 * @argument {Tri} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Bi &a, const Tri &b) {
  Una res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 18 muls / 16 adds
  res[0]=a[6]*b[2]+a[8]*b[4]-a[4]*b[0];
  res[1]=a[1]*b[0]+a[8]*b[7]-a[3]*b[2];
  res[2]=-a[0]*b[0]-a[3]*b[4]-a[6]*b[7];
  res[3]=-a[0]*b[1]-a[1]*b[3]-a[3]*b[5]-a[4]*b[6]-a[6]*b[8]-a[8]*b[9];
  res[4]=-a[0]*b[2]-a[1]*b[4]-a[4]*b[7];
  return res;
}

/*******************************************************************************
 * gp_Bi_Tri
 * @argument {Bi} a
 * @argument {Tri} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Bi &a, const Tri &b) {
  Odd res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 76 muls / 63 adds
  res[0]=a[6]*b[2]+a[8]*b[4]-a[4]*b[0];
  res[1]=a[1]*b[0]+a[8]*b[7]-a[3]*b[2];
  res[2]=-a[0]*b[0]-a[3]*b[4]-a[6]*b[7];
  res[3]=-a[0]*b[1]-a[1]*b[3]-a[3]*b[5]-a[4]*b[6]-a[6]*b[8]-a[8]*b[9];
  res[4]=-a[0]*b[2]-a[1]*b[4]-a[4]*b[7];
  res[5]=a[3]*b[7]+a[8]*b[2]-a[6]*b[4];
  res[6]=a[1]*b[6]+a[3]*b[8]+a[7]*b[0]+a[9]*b[2]-a[4]*b[3]-a[6]*b[5];
  res[7]=a[1]*b[7]+a[8]*b[0]-a[4]*b[4];
  res[8]=a[3]*b[9]+a[4]*b[1]+a[9]*b[4]-a[0]*b[6]-a[5]*b[0]-a[8]*b[5];
  res[9]=a[4]*b[2]-a[0]*b[7]-a[6]*b[0];
  res[10]=a[5]*b[2]+a[7]*b[4]-a[0]*b[8]-a[1]*b[9]-a[6]*b[1]-a[8]*b[3];
  res[11]=a[0]*b[3]+a[2]*b[0]+a[6]*b[9]+a[9]*b[7]-a[1]*b[1]-a[8]*b[8];
  res[12]=a[0]*b[4]+a[3]*b[0]-a[1]*b[2];
  res[13]=a[0]*b[5]+a[3]*b[1]+a[7]*b[7]-a[2]*b[2]-a[4]*b[9]-a[8]*b[6];
  res[14]=a[1]*b[5]+a[3]*b[3]+a[4]*b[8]+a[6]*b[6]-a[2]*b[4]-a[5]*b[7];
  res[15]=a[0]*b[9]+a[2]*b[7]+a[4]*b[5]+a[6]*b[3]+a[7]*b[2]+a[9]*b[0]-a[1]*b[8]-a[3]*b[6]-a[5]*b[4]-a[8]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Bi_Quad
 * @argument {Bi} a
 * @argument {Quad} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator | (const Bi &a, const Quad &b) {
  Bi res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 18 muls / 13 adds
  res[0]=a[8]*b[1];
  res[1]=-a[6]*b[1];
  res[2]=-a[4]*b[0]-a[6]*b[2]-a[8]*b[3];
  res[3]=-a[4]*b[1];
  res[4]=a[3]*b[1];
  res[5]=a[1]*b[0]+a[3]*b[2]-a[8]*b[4];
  res[6]=a[1]*b[1];
  res[7]=a[3]*b[3]+a[6]*b[4]-a[0]*b[0];
  res[8]=-a[0]*b[1];
  res[9]=-a[0]*b[2]-a[1]*b[3]-a[4]*b[4];
  return res;
}

/*******************************************************************************
 * gp_Bi_Quad
 * @argument {Bi} a
 * @argument {Quad} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Bi &a, const Quad &b) {
  Even res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 34 muls / 25 adds
  res[0]=0.0;
  res[1]=a[8]*b[1];
  res[2]=-a[6]*b[1];
  res[3]=-a[4]*b[0]-a[6]*b[2]-a[8]*b[3];
  res[4]=-a[4]*b[1];
  res[5]=a[3]*b[1];
  res[6]=a[1]*b[0]+a[3]*b[2]-a[8]*b[4];
  res[7]=a[1]*b[1];
  res[8]=a[3]*b[3]+a[6]*b[4]-a[0]*b[0];
  res[9]=-a[0]*b[1];
  res[10]=-a[0]*b[2]-a[1]*b[3]-a[4]*b[4];
  res[11]=a[6]*b[3]+a[9]*b[1]-a[3]*b[4]-a[8]*b[2];
  res[12]=0.0;
  res[13]=a[1]*b[4]+a[7]*b[1]-a[4]*b[3]-a[8]*b[0];
  res[14]=a[4]*b[2]+a[6]*b[0]-a[0]*b[4]-a[5]*b[1];
  res[15]=a[0]*b[3]+a[2]*b[1]-a[1]*b[2]-a[3]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Bi_Pent
 * @argument {Bi} a
 * @argument {Pent} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator | (const Bi &a, const Pent &b) {
  Tri res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 6 muls / 4 adds
  res[0]=0.0;
  res[1]=-a[8]*b[0];
  res[2]=0.0;
  res[3]=a[6]*b[0];
  res[4]=0.0;
  res[5]=-a[4]*b[0];
  res[6]=-a[3]*b[0];
  res[7]=0.0;
  res[8]=a[1]*b[0];
  res[9]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Bi_Pent
 * @argument {Bi} a
 * @argument {Pent} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator * (const Bi &a, const Pent &b) {
  Tri res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 6 muls / 4 adds
  res[0]=0.0;
  res[1]=-a[8]*b[0];
  res[2]=0.0;
  res[3]=a[6]*b[0];
  res[4]=0.0;
  res[5]=-a[4]*b[0];
  res[6]=-a[3]*b[0];
  res[7]=0.0;
  res[8]=a[1]*b[0];
  res[9]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Bi_Even
 * @argument {Bi} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Bi &a, const Even &b) {
  Even res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 34 muls / 23 adds
  res[0]=a[3]*b[4]+a[6]*b[7]+a[8]*b[9]-a[0]*b[1]-a[1]*b[2]-a[4]*b[5];
  res[1]=a[0]*b[0]+a[8]*b[12];
  res[2]=a[1]*b[0]-a[6]*b[12];
  res[3]=a[2]*b[0]-a[4]*b[11]-a[6]*b[13]-a[8]*b[14];
  res[4]=a[3]*b[0]-a[4]*b[12];
  res[5]=a[3]*b[12]+a[4]*b[0];
  res[6]=a[1]*b[11]+a[3]*b[13]+a[5]*b[0]-a[8]*b[15];
  res[7]=a[1]*b[12]+a[6]*b[0];
  res[8]=a[3]*b[14]+a[6]*b[15]+a[7]*b[0]-a[0]*b[11];
  res[9]=a[8]*b[0]-a[0]*b[12];
  res[10]=a[9]*b[0]-a[0]*b[13]-a[1]*b[14]-a[4]*b[15];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Bi_Even
 * @argument {Bi} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Bi &a, const Even &b) {
  Even res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 128 muls / 112 adds
  res[0]=a[3]*b[4]+a[6]*b[7]+a[8]*b[9]-a[0]*b[1]-a[1]*b[2]-a[4]*b[5];
  res[1]=a[0]*b[0]+a[1]*b[5]+a[6]*b[4]+a[8]*b[12]-a[3]*b[7]-a[4]*b[2];
  res[2]=a[1]*b[0]+a[4]*b[1]+a[8]*b[4]-a[0]*b[5]-a[3]*b[9]-a[6]*b[12];
  res[3]=a[2]*b[0]+a[5]*b[1]+a[7]*b[2]+a[9]*b[4]-a[0]*b[6]-a[1]*b[8]-a[3]*b[10]-a[4]*b[11]-a[6]*b[13]-a[8]*b[14];
  res[4]=a[3]*b[0]+a[6]*b[1]+a[8]*b[2]-a[0]*b[7]-a[1]*b[9]-a[4]*b[12];
  res[5]=a[0]*b[2]+a[3]*b[12]+a[4]*b[0]+a[8]*b[7]-a[1]*b[1]-a[6]*b[9];
  res[6]=a[0]*b[3]+a[1]*b[11]+a[3]*b[13]+a[5]*b[0]+a[7]*b[5]+a[9]*b[7]-a[2]*b[1]-a[4]*b[8]-a[6]*b[10]-a[8]*b[15];
  res[7]=a[0]*b[4]+a[1]*b[12]+a[6]*b[0]+a[8]*b[5]-a[3]*b[1]-a[4]*b[9];
  res[8]=a[1]*b[3]+a[3]*b[14]+a[4]*b[6]+a[6]*b[15]+a[7]*b[0]+a[9]*b[9]-a[0]*b[11]-a[2]*b[2]-a[5]*b[5]-a[8]*b[10];
  res[9]=a[1]*b[4]+a[4]*b[7]+a[8]*b[0]-a[0]*b[12]-a[3]*b[2]-a[6]*b[5];
  res[10]=a[2]*b[4]+a[5]*b[7]+a[7]*b[9]+a[9]*b[0]-a[0]*b[13]-a[1]*b[14]-a[3]*b[3]-a[4]*b[15]-a[6]*b[6]-a[8]*b[8];
  res[11]=a[0]*b[8]+a[2]*b[5]+a[4]*b[3]+a[6]*b[14]+a[7]*b[1]+a[9]*b[12]-a[1]*b[6]-a[3]*b[15]-a[5]*b[2]-a[8]*b[13];
  res[12]=a[0]*b[9]+a[3]*b[5]+a[4]*b[4]+a[8]*b[1]-a[1]*b[7]-a[6]*b[2];
  res[13]=a[0]*b[10]+a[1]*b[15]+a[3]*b[6]+a[5]*b[4]+a[7]*b[12]+a[9]*b[1]-a[2]*b[7]-a[4]*b[14]-a[6]*b[3]-a[8]*b[11];
  res[14]=a[1]*b[10]+a[3]*b[8]+a[4]*b[13]+a[6]*b[11]+a[7]*b[4]+a[9]*b[2]-a[0]*b[15]-a[2]*b[9]-a[5]*b[12]-a[8]*b[3];
  res[15]=a[0]*b[14]+a[2]*b[12]+a[4]*b[10]+a[6]*b[8]+a[7]*b[7]+a[9]*b[5]-a[1]*b[13]-a[3]*b[11]-a[5]*b[9]-a[8]*b[6];
  return res;
}

/*******************************************************************************
 * ip_Bi_Odd
 * @argument {Bi} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Bi &a, const Odd &b) {
  Odd res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 40 muls / 33 adds
  res[0]=a[3]*b[4]+a[6]*b[7]+a[8]*b[9]-a[0]*b[1]-a[1]*b[2]-a[4]*b[5];
  res[1]=a[0]*b[0]+a[1]*b[5]+a[6]*b[4]+a[8]*b[12]-a[3]*b[7]-a[4]*b[2];
  res[2]=a[1]*b[0]+a[4]*b[1]+a[8]*b[4]-a[0]*b[5]-a[3]*b[9]-a[6]*b[12];
  res[3]=a[2]*b[0]+a[5]*b[1]+a[7]*b[2]+a[9]*b[4]-a[0]*b[6]-a[1]*b[8]-a[3]*b[10]-a[4]*b[11]-a[6]*b[13]-a[8]*b[14];
  res[4]=a[3]*b[0]+a[6]*b[1]+a[8]*b[2]-a[0]*b[7]-a[1]*b[9]-a[4]*b[12];
  res[5]=0.0;
  res[6]=-a[8]*b[15];
  res[7]=0.0;
  res[8]=a[6]*b[15];
  res[9]=0.0;
  res[10]=-a[4]*b[15];
  res[11]=-a[3]*b[15];
  res[12]=0.0;
  res[13]=a[1]*b[15];
  res[14]=-a[0]*b[15];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Bi_Odd
 * @argument {Bi} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Bi &a, const Odd &b) {
  Odd res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 128 muls / 112 adds
  res[0]=a[3]*b[4]+a[6]*b[7]+a[8]*b[9]-a[0]*b[1]-a[1]*b[2]-a[4]*b[5];
  res[1]=a[0]*b[0]+a[1]*b[5]+a[6]*b[4]+a[8]*b[12]-a[3]*b[7]-a[4]*b[2];
  res[2]=a[1]*b[0]+a[4]*b[1]+a[8]*b[4]-a[0]*b[5]-a[3]*b[9]-a[6]*b[12];
  res[3]=a[2]*b[0]+a[5]*b[1]+a[7]*b[2]+a[9]*b[4]-a[0]*b[6]-a[1]*b[8]-a[3]*b[10]-a[4]*b[11]-a[6]*b[13]-a[8]*b[14];
  res[4]=a[3]*b[0]+a[6]*b[1]+a[8]*b[2]-a[0]*b[7]-a[1]*b[9]-a[4]*b[12];
  res[5]=a[0]*b[2]+a[3]*b[12]+a[4]*b[0]+a[8]*b[7]-a[1]*b[1]-a[6]*b[9];
  res[6]=a[0]*b[3]+a[1]*b[11]+a[3]*b[13]+a[5]*b[0]+a[7]*b[5]+a[9]*b[7]-a[2]*b[1]-a[4]*b[8]-a[6]*b[10]-a[8]*b[15];
  res[7]=a[0]*b[4]+a[1]*b[12]+a[6]*b[0]+a[8]*b[5]-a[3]*b[1]-a[4]*b[9];
  res[8]=a[1]*b[3]+a[3]*b[14]+a[4]*b[6]+a[6]*b[15]+a[7]*b[0]+a[9]*b[9]-a[0]*b[11]-a[2]*b[2]-a[5]*b[5]-a[8]*b[10];
  res[9]=a[1]*b[4]+a[4]*b[7]+a[8]*b[0]-a[0]*b[12]-a[3]*b[2]-a[6]*b[5];
  res[10]=a[2]*b[4]+a[5]*b[7]+a[7]*b[9]+a[9]*b[0]-a[0]*b[13]-a[1]*b[14]-a[3]*b[3]-a[4]*b[15]-a[6]*b[6]-a[8]*b[8];
  res[11]=a[0]*b[8]+a[2]*b[5]+a[4]*b[3]+a[6]*b[14]+a[7]*b[1]+a[9]*b[12]-a[1]*b[6]-a[3]*b[15]-a[5]*b[2]-a[8]*b[13];
  res[12]=a[0]*b[9]+a[3]*b[5]+a[4]*b[4]+a[8]*b[1]-a[1]*b[7]-a[6]*b[2];
  res[13]=a[0]*b[10]+a[1]*b[15]+a[3]*b[6]+a[5]*b[4]+a[7]*b[12]+a[9]*b[1]-a[2]*b[7]-a[4]*b[14]-a[6]*b[3]-a[8]*b[11];
  res[14]=a[1]*b[10]+a[3]*b[8]+a[4]*b[13]+a[6]*b[11]+a[7]*b[4]+a[9]*b[2]-a[0]*b[15]-a[2]*b[9]-a[5]*b[12]-a[8]*b[3];
  res[15]=a[0]*b[14]+a[2]*b[12]+a[4]*b[10]+a[6]*b[8]+a[7]*b[7]+a[9]*b[5]-a[1]*b[13]-a[3]*b[11]-a[5]*b[9]-a[8]*b[6];
  return res;
}

/*******************************************************************************
 * add_Bi_Bi
 * @argument {Bi} a
 * @argument {Bi} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator + (const Bi &a, const Bi &b) {
  Bi res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 0 muls / 10 adds
  res[0]=a[0]+b[0];
  res[1]=a[1]+b[1];
  res[2]=a[2]+b[2];
  res[3]=a[3]+b[3];
  res[4]=a[4]+b[4];
  res[5]=a[5]+b[5];
  res[6]=a[6]+b[6];
  res[7]=a[7]+b[7];
  res[8]=a[8]+b[8];
  res[9]=a[9]+b[9];
  return res;
}

/*******************************************************************************
 * sub_Bi_Bi
 * @argument {Bi} a
 * @argument {Bi} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator - (const Bi &a, const Bi &b) {
  Bi res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 0 muls / 10 adds
  res[0]=a[0]-b[0];
  res[1]=a[1]-b[1];
  res[2]=a[2]-b[2];
  res[3]=a[3]-b[3];
  res[4]=a[4]-b[4];
  res[5]=a[5]-b[5];
  res[6]=a[6]-b[6];
  res[7]=a[7]-b[7];
  res[8]=a[8]-b[8];
  res[9]=a[9]-b[9];
  return res;
}

/*******************************************************************************
 * reverse_Bi
 * @argument {Bi} a
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator ~ (const Bi &a) {
  Bi res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 0 muls / 10 adds
  res[0]=-a[0];
  res[1]=-a[1];
  res[2]=-a[2];
  res[3]=-a[3];
  res[4]=-a[4];
  res[5]=-a[5];
  res[6]=-a[6];
  res[7]=-a[7];
  res[8]=-a[8];
  res[9]=-a[9];
  return res;
}

/*******************************************************************************
 * gp_Bi_float
 * @argument {Bi} a
 * @argument {float} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator * (const Bi &a, const float &b) {
  Bi res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 10 muls / 0 adds
  res[0]=a[0]*b;
  res[1]=a[1]*b;
  res[2]=a[2]*b;
  res[3]=a[3]*b;
  res[4]=a[4]*b;
  res[5]=a[5]*b;
  res[6]=a[6]*b;
  res[7]=a[7]*b;
  res[8]=a[8]*b;
  res[9]=a[9]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Bi
 * @argument {float} a
 * @argument {Bi} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator * (const float &a, const Bi &b) {
  Bi res;
  // a
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 10 muls / 0 adds
  res[0]=a*b[0];
  res[1]=a*b[1];
  res[2]=a*b[2];
  res[3]=a*b[3];
  res[4]=a*b[4];
  res[5]=a*b[5];
  res[6]=a*b[6];
  res[7]=a*b[7];
  res[8]=a*b[8];
  res[9]=a*b[9];
  return res;
}

/*******************************************************************************
 * add_Bi_float
 * @argument {Bi} a
 * @argument {float} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator + (const Bi &a, const float &b) {
  Even res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 0 adds
  res[0]=b;
  res[1]=a[0];
  res[2]=a[1];
  res[3]=a[2];
  res[4]=a[3];
  res[5]=a[4];
  res[6]=a[5];
  res[7]=a[6];
  res[8]=a[7];
  res[9]=a[8];
  res[10]=a[9];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * sub_Bi_float
 * @argument {Bi} a
 * @argument {float} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator - (const Bi &a, const float &b) {
  Even res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 1 adds
  res[0]=-b;
  res[1]=a[0];
  res[2]=a[1];
  res[3]=a[2];
  res[4]=a[3];
  res[5]=a[4];
  res[6]=a[5];
  res[7]=a[6];
  res[8]=a[7];
  res[9]=a[8];
  res[10]=a[9];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * add_float_Bi
 * @argument {float} a
 * @argument {Bi} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator + (const float &a, const Bi &b) {
  Even res;
  // a
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 0 adds
  res[0]=a;
  res[1]=b[0];
  res[2]=b[1];
  res[3]=b[2];
  res[4]=b[3];
  res[5]=b[4];
  res[6]=b[5];
  res[7]=b[6];
  res[8]=b[7];
  res[9]=b[8];
  res[10]=b[9];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * sub_float_Bi
 * @argument {float} a
 * @argument {Bi} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator - (const float &a, const Bi &b) {
  Even res;
  // a
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 10 adds
  res[0]=a;
  res[1]=-b[0];
  res[2]=-b[1];
  res[3]=-b[2];
  res[4]=-b[3];
  res[5]=-b[4];
  res[6]=-b[5];
  res[7]=-b[6];
  res[8]=-b[7];
  res[9]=-b[8];
  res[10]=-b[9];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Tri_Una
 * @argument {Tri} a
 * @argument {Una} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator | (const Tri &a, const Una &b) {
  Bi res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 24 muls / 16 adds
  res[0]=a[2]*b[4]-a[0]*b[2];
  res[1]=a[0]*b[1]+a[4]*b[4];
  res[2]=a[1]*b[1]+a[3]*b[2]+a[5]*b[4];
  res[3]=a[2]*b[1]+a[4]*b[2];
  res[4]=a[7]*b[4]-a[0]*b[0];
  res[5]=a[6]*b[2]+a[8]*b[4]-a[1]*b[0];
  res[6]=a[7]*b[2]-a[2]*b[0];
  res[7]=a[9]*b[4]-a[3]*b[0]-a[6]*b[1];
  res[8]=-a[4]*b[0]-a[7]*b[1];
  res[9]=-a[5]*b[0]-a[8]*b[1]-a[9]*b[2];
  return res;
}

/*******************************************************************************
 * gp_Tri_Una
 * @argument {Tri} a
 * @argument {Una} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Tri &a, const Una &b) {
  Even res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 44 muls / 31 adds
  res[0]=0.0;
  res[1]=a[2]*b[4]-a[0]*b[2];
  res[2]=a[0]*b[1]+a[4]*b[4];
  res[3]=a[1]*b[1]+a[3]*b[2]+a[5]*b[4];
  res[4]=a[2]*b[1]+a[4]*b[2];
  res[5]=a[7]*b[4]-a[0]*b[0];
  res[6]=a[6]*b[2]+a[8]*b[4]-a[1]*b[0];
  res[7]=a[7]*b[2]-a[2]*b[0];
  res[8]=a[9]*b[4]-a[3]*b[0]-a[6]*b[1];
  res[9]=-a[4]*b[0]-a[7]*b[1];
  res[10]=-a[5]*b[0]-a[8]*b[1]-a[9]*b[2];
  res[11]=a[0]*b[3]+a[3]*b[1]-a[1]*b[2]-a[6]*b[0];
  res[12]=a[0]*b[4]+a[4]*b[1]-a[2]*b[2]-a[7]*b[0];
  res[13]=a[1]*b[4]+a[5]*b[1]-a[2]*b[3]-a[8]*b[0];
  res[14]=a[3]*b[4]+a[5]*b[2]-a[4]*b[3]-a[9]*b[0];
  res[15]=a[6]*b[4]+a[8]*b[2]-a[7]*b[3]-a[9]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Tri_Bi
 * @argument {Tri} a
 * @argument {Bi} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Tri &a, const Bi &b) {
  Una res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 18 muls / 16 adds
  res[0]=a[2]*b[6]+a[4]*b[8]-a[0]*b[4];
  res[1]=a[0]*b[1]+a[7]*b[8]-a[2]*b[3];
  res[2]=-a[0]*b[0]-a[4]*b[3]-a[7]*b[6];
  res[3]=-a[1]*b[0]-a[3]*b[1]-a[5]*b[3]-a[6]*b[4]-a[8]*b[6]-a[9]*b[8];
  res[4]=-a[2]*b[0]-a[4]*b[1]-a[7]*b[4];
  return res;
}

/*******************************************************************************
 * gp_Tri_Bi
 * @argument {Tri} a
 * @argument {Bi} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Tri &a, const Bi &b) {
  Odd res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 76 muls / 63 adds
  res[0]=a[2]*b[6]+a[4]*b[8]-a[0]*b[4];
  res[1]=a[0]*b[1]+a[7]*b[8]-a[2]*b[3];
  res[2]=-a[0]*b[0]-a[4]*b[3]-a[7]*b[6];
  res[3]=-a[1]*b[0]-a[3]*b[1]-a[5]*b[3]-a[6]*b[4]-a[8]*b[6]-a[9]*b[8];
  res[4]=-a[2]*b[0]-a[4]*b[1]-a[7]*b[4];
  res[5]=a[4]*b[6]-a[2]*b[8]-a[7]*b[3];
  res[6]=a[3]*b[4]+a[5]*b[6]-a[0]*b[7]-a[2]*b[9]-a[6]*b[1]-a[8]*b[3];
  res[7]=a[4]*b[4]-a[0]*b[8]-a[7]*b[1];
  res[8]=a[0]*b[5]+a[5]*b[8]+a[6]*b[0]-a[1]*b[4]-a[4]*b[9]-a[9]*b[3];
  res[9]=a[0]*b[6]+a[7]*b[0]-a[2]*b[4];
  res[10]=a[1]*b[6]+a[3]*b[8]+a[8]*b[0]+a[9]*b[1]-a[2]*b[5]-a[4]*b[7];
  res[11]=a[1]*b[1]+a[8]*b[8]-a[0]*b[2]-a[3]*b[0]-a[7]*b[9]-a[9]*b[6];
  res[12]=a[2]*b[1]-a[0]*b[3]-a[4]*b[0];
  res[13]=a[2]*b[2]+a[6]*b[8]+a[9]*b[4]-a[1]*b[3]-a[5]*b[0]-a[7]*b[7];
  res[14]=a[4]*b[2]+a[7]*b[5]-a[3]*b[3]-a[5]*b[1]-a[6]*b[6]-a[8]*b[4];
  res[15]=a[0]*b[9]+a[2]*b[7]+a[3]*b[6]+a[5]*b[4]+a[7]*b[2]+a[9]*b[0]-a[1]*b[8]-a[4]*b[5]-a[6]*b[3]-a[8]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Tri_Tri
 * @argument {Tri} a
 * @argument {Tri} b
 * @returns {float}
 ******************************************************************************/
inline float operator | (const Tri &a, const Tri &b) {
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r
  // 4 muls / 3 adds
  return a[0]*b[0]-a[2]*b[2]-a[4]*b[4]-a[7]*b[7];
}

/*******************************************************************************
 * gp_Tri_Tri
 * @argument {Tri} a
 * @argument {Tri} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Tri &a, const Tri &b) {
  Even res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 64 muls / 49 adds
  res[0]=a[0]*b[0]-a[2]*b[2]-a[4]*b[4]-a[7]*b[7];
  res[1]=a[4]*b[7]-a[7]*b[4];
  res[2]=a[7]*b[2]-a[2]*b[7];
  res[3]=a[6]*b[0]+a[8]*b[2]+a[9]*b[4]-a[0]*b[6]-a[2]*b[8]-a[4]*b[9];
  res[4]=a[7]*b[0]-a[0]*b[7];
  res[5]=a[2]*b[4]-a[4]*b[2];
  res[6]=a[0]*b[3]+a[2]*b[5]+a[9]*b[7]-a[3]*b[0]-a[5]*b[2]-a[7]*b[9];
  res[7]=a[0]*b[4]-a[4]*b[0];
  res[8]=a[1]*b[0]+a[4]*b[5]+a[7]*b[8]-a[0]*b[1]-a[5]*b[4]-a[8]*b[7];
  res[9]=a[2]*b[0]-a[0]*b[2];
  res[10]=a[2]*b[1]+a[4]*b[3]+a[7]*b[6]-a[1]*b[2]-a[3]*b[4]-a[6]*b[7];
  res[11]=a[2]*b[9]+a[5]*b[7]+a[7]*b[5]+a[9]*b[2]-a[4]*b[8]-a[8]*b[4];
  res[12]=0.0;
  res[13]=a[3]*b[7]+a[7]*b[3]-a[0]*b[9]-a[4]*b[6]-a[6]*b[4]-a[9]*b[0];
  res[14]=a[0]*b[8]+a[2]*b[6]+a[6]*b[2]+a[8]*b[0]-a[1]*b[7]-a[7]*b[1];
  res[15]=a[1]*b[4]+a[4]*b[1]-a[0]*b[5]-a[2]*b[3]-a[3]*b[2]-a[5]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Tri_Quad
 * @argument {Tri} a
 * @argument {Quad} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Tri &a, const Quad &b) {
  Una res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 8 muls / 4 adds
  res[0]=a[7]*b[1];
  res[1]=-a[4]*b[1];
  res[2]=a[2]*b[1];
  res[3]=a[0]*b[0]+a[2]*b[2]+a[4]*b[3]+a[7]*b[4];
  res[4]=a[0]*b[1];
  return res;
}

/*******************************************************************************
 * gp_Tri_Quad
 * @argument {Tri} a
 * @argument {Quad} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Tri &a, const Quad &b) {
  Odd res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 26 muls / 16 adds
  res[0]=a[7]*b[1];
  res[1]=-a[4]*b[1];
  res[2]=a[2]*b[1];
  res[3]=a[0]*b[0]+a[2]*b[2]+a[4]*b[3]+a[7]*b[4];
  res[4]=a[0]*b[1];
  res[5]=0.0;
  res[6]=a[7]*b[3]-a[4]*b[4]-a[9]*b[1];
  res[7]=0.0;
  res[8]=a[2]*b[4]+a[8]*b[1]-a[7]*b[2];
  res[9]=0.0;
  res[10]=a[6]*b[1]-a[0]*b[4]-a[7]*b[0];
  res[11]=a[4]*b[2]-a[2]*b[3]-a[5]*b[1];
  res[12]=0.0;
  res[13]=a[0]*b[3]+a[4]*b[0]-a[3]*b[1];
  res[14]=a[1]*b[1]-a[0]*b[2]-a[2]*b[0];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Tri_Pent
 * @argument {Tri} a
 * @argument {Pent} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator | (const Tri &a, const Pent &b) {
  Bi res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 4 muls / 2 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=-a[7]*b[0];
  res[3]=0.0;
  res[4]=0.0;
  res[5]=a[4]*b[0];
  res[6]=0.0;
  res[7]=-a[2]*b[0];
  res[8]=0.0;
  res[9]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Tri_Pent
 * @argument {Tri} a
 * @argument {Pent} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator * (const Tri &a, const Pent &b) {
  Bi res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 4 muls / 2 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=-a[7]*b[0];
  res[3]=0.0;
  res[4]=0.0;
  res[5]=a[4]*b[0];
  res[6]=0.0;
  res[7]=-a[2]*b[0];
  res[8]=0.0;
  res[9]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Tri_Even
 * @argument {Tri} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Tri &a, const Even &b) {
  Odd res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 36 muls / 21 adds
  res[0]=a[2]*b[7]+a[4]*b[9]+a[7]*b[12]-a[0]*b[5];
  res[1]=a[0]*b[2]+a[7]*b[9]-a[2]*b[4]-a[4]*b[12];
  res[2]=a[2]*b[12]-a[0]*b[1]-a[4]*b[4]-a[7]*b[7];
  res[3]=a[0]*b[11]+a[2]*b[13]+a[4]*b[14]+a[7]*b[15]-a[1]*b[1]-a[3]*b[2]-a[5]*b[4]-a[6]*b[5]-a[8]*b[7]-a[9]*b[9];
  res[4]=a[0]*b[12]-a[2]*b[1]-a[4]*b[2]-a[7]*b[5];
  res[5]=a[0]*b[0];
  res[6]=a[1]*b[0];
  res[7]=a[2]*b[0];
  res[8]=a[3]*b[0];
  res[9]=a[4]*b[0];
  res[10]=a[5]*b[0];
  res[11]=a[6]*b[0];
  res[12]=a[7]*b[0];
  res[13]=a[8]*b[0];
  res[14]=a[9]*b[0];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Tri_Even
 * @argument {Tri} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Tri &a, const Even &b) {
  Odd res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 112 muls / 96 adds
  res[0]=a[2]*b[7]+a[4]*b[9]+a[7]*b[12]-a[0]*b[5];
  res[1]=a[0]*b[2]+a[7]*b[9]-a[2]*b[4]-a[4]*b[12];
  res[2]=a[2]*b[12]-a[0]*b[1]-a[4]*b[4]-a[7]*b[7];
  res[3]=a[0]*b[11]+a[2]*b[13]+a[4]*b[14]+a[7]*b[15]-a[1]*b[1]-a[3]*b[2]-a[5]*b[4]-a[6]*b[5]-a[8]*b[7]-a[9]*b[9];
  res[4]=a[0]*b[12]-a[2]*b[1]-a[4]*b[2]-a[7]*b[5];
  res[5]=a[0]*b[0]+a[4]*b[7]-a[2]*b[9]-a[7]*b[4];
  res[6]=a[1]*b[0]+a[3]*b[5]+a[5]*b[7]+a[7]*b[14]-a[0]*b[8]-a[2]*b[10]-a[4]*b[15]-a[6]*b[2]-a[8]*b[4]-a[9]*b[12];
  res[7]=a[2]*b[0]+a[4]*b[5]-a[0]*b[9]-a[7]*b[2];
  res[8]=a[0]*b[6]+a[2]*b[15]+a[3]*b[0]+a[5]*b[9]+a[6]*b[1]+a[8]*b[12]-a[1]*b[5]-a[4]*b[10]-a[7]*b[13]-a[9]*b[4];
  res[9]=a[0]*b[7]+a[4]*b[0]+a[7]*b[1]-a[2]*b[5];
  res[10]=a[1]*b[7]+a[3]*b[9]+a[5]*b[0]+a[6]*b[12]+a[8]*b[1]+a[9]*b[2]-a[0]*b[15]-a[2]*b[6]-a[4]*b[8]-a[7]*b[11];
  res[11]=a[1]*b[2]+a[4]*b[13]+a[6]*b[0]+a[8]*b[9]-a[0]*b[3]-a[2]*b[14]-a[3]*b[1]-a[5]*b[12]-a[7]*b[10]-a[9]*b[7];
  res[12]=a[2]*b[2]+a[7]*b[0]-a[0]*b[4]-a[4]*b[1];
  res[13]=a[0]*b[14]+a[2]*b[3]+a[4]*b[11]+a[6]*b[9]+a[8]*b[0]+a[9]*b[5]-a[1]*b[4]-a[3]*b[12]-a[5]*b[1]-a[7]*b[8];
  res[14]=a[1]*b[12]+a[4]*b[3]+a[7]*b[6]+a[9]*b[0]-a[0]*b[13]-a[2]*b[11]-a[3]*b[4]-a[5]*b[2]-a[6]*b[7]-a[8]*b[5];
  res[15]=a[0]*b[10]+a[2]*b[8]+a[3]*b[7]+a[5]*b[5]+a[7]*b[3]+a[9]*b[1]-a[1]*b[9]-a[4]*b[6]-a[6]*b[4]-a[8]*b[2];
  return res;
}

/*******************************************************************************
 * ip_Tri_Odd
 * @argument {Tri} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Tri &a, const Odd &b) {
  Even res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 32 muls / 22 adds
  res[0]=a[0]*b[5]-a[2]*b[7]-a[4]*b[9]-a[7]*b[12];
  res[1]=a[2]*b[4]-a[0]*b[2];
  res[2]=a[0]*b[1]+a[4]*b[4];
  res[3]=a[1]*b[1]+a[3]*b[2]+a[5]*b[4]-a[7]*b[15];
  res[4]=a[2]*b[1]+a[4]*b[2];
  res[5]=a[7]*b[4]-a[0]*b[0];
  res[6]=a[4]*b[15]+a[6]*b[2]+a[8]*b[4]-a[1]*b[0];
  res[7]=a[7]*b[2]-a[2]*b[0];
  res[8]=a[9]*b[4]-a[2]*b[15]-a[3]*b[0]-a[6]*b[1];
  res[9]=-a[4]*b[0]-a[7]*b[1];
  res[10]=a[0]*b[15]-a[5]*b[0]-a[8]*b[1]-a[9]*b[2];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Tri_Odd
 * @argument {Tri} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Tri &a, const Odd &b) {
  Even res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 112 muls / 96 adds
  res[0]=a[0]*b[5]-a[2]*b[7]-a[4]*b[9]-a[7]*b[12];
  res[1]=a[2]*b[4]+a[4]*b[12]-a[0]*b[2]-a[7]*b[9];
  res[2]=a[0]*b[1]+a[4]*b[4]+a[7]*b[7]-a[2]*b[12];
  res[3]=a[1]*b[1]+a[3]*b[2]+a[5]*b[4]+a[6]*b[5]+a[8]*b[7]+a[9]*b[9]-a[0]*b[11]-a[2]*b[13]-a[4]*b[14]-a[7]*b[15];
  res[4]=a[2]*b[1]+a[4]*b[2]+a[7]*b[5]-a[0]*b[12];
  res[5]=a[2]*b[9]+a[7]*b[4]-a[0]*b[0]-a[4]*b[7];
  res[6]=a[0]*b[8]+a[2]*b[10]+a[4]*b[15]+a[6]*b[2]+a[8]*b[4]+a[9]*b[12]-a[1]*b[0]-a[3]*b[5]-a[5]*b[7]-a[7]*b[14];
  res[7]=a[0]*b[9]+a[7]*b[2]-a[2]*b[0]-a[4]*b[5];
  res[8]=a[1]*b[5]+a[4]*b[10]+a[7]*b[13]+a[9]*b[4]-a[0]*b[6]-a[2]*b[15]-a[3]*b[0]-a[5]*b[9]-a[6]*b[1]-a[8]*b[12];
  res[9]=a[2]*b[5]-a[0]*b[7]-a[4]*b[0]-a[7]*b[1];
  res[10]=a[0]*b[15]+a[2]*b[6]+a[4]*b[8]+a[7]*b[11]-a[1]*b[7]-a[3]*b[9]-a[5]*b[0]-a[6]*b[12]-a[8]*b[1]-a[9]*b[2];
  res[11]=a[0]*b[3]+a[2]*b[14]+a[3]*b[1]+a[5]*b[12]+a[7]*b[10]+a[9]*b[7]-a[1]*b[2]-a[4]*b[13]-a[6]*b[0]-a[8]*b[9];
  res[12]=a[0]*b[4]+a[4]*b[1]-a[2]*b[2]-a[7]*b[0];
  res[13]=a[1]*b[4]+a[3]*b[12]+a[5]*b[1]+a[7]*b[8]-a[0]*b[14]-a[2]*b[3]-a[4]*b[11]-a[6]*b[9]-a[8]*b[0]-a[9]*b[5];
  res[14]=a[0]*b[13]+a[2]*b[11]+a[3]*b[4]+a[5]*b[2]+a[6]*b[7]+a[8]*b[5]-a[1]*b[12]-a[4]*b[3]-a[7]*b[6]-a[9]*b[0];
  res[15]=a[1]*b[9]+a[4]*b[6]+a[6]*b[4]+a[8]*b[2]-a[0]*b[10]-a[2]*b[8]-a[3]*b[7]-a[5]*b[5]-a[7]*b[3]-a[9]*b[1];
  return res;
}

/*******************************************************************************
 * add_Tri_Tri
 * @argument {Tri} a
 * @argument {Tri} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator + (const Tri &a, const Tri &b) {
  Tri res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 0 muls / 10 adds
  res[0]=a[0]+b[0];
  res[1]=a[1]+b[1];
  res[2]=a[2]+b[2];
  res[3]=a[3]+b[3];
  res[4]=a[4]+b[4];
  res[5]=a[5]+b[5];
  res[6]=a[6]+b[6];
  res[7]=a[7]+b[7];
  res[8]=a[8]+b[8];
  res[9]=a[9]+b[9];
  return res;
}

/*******************************************************************************
 * sub_Tri_Tri
 * @argument {Tri} a
 * @argument {Tri} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator - (const Tri &a, const Tri &b) {
  Tri res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 0 muls / 10 adds
  res[0]=a[0]-b[0];
  res[1]=a[1]-b[1];
  res[2]=a[2]-b[2];
  res[3]=a[3]-b[3];
  res[4]=a[4]-b[4];
  res[5]=a[5]-b[5];
  res[6]=a[6]-b[6];
  res[7]=a[7]-b[7];
  res[8]=a[8]-b[8];
  res[9]=a[9]-b[9];
  return res;
}

/*******************************************************************************
 * reverse_Tri
 * @argument {Tri} a
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator ~ (const Tri &a) {
  Tri res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 0 muls / 10 adds
  res[0]=-a[0];
  res[1]=-a[1];
  res[2]=-a[2];
  res[3]=-a[3];
  res[4]=-a[4];
  res[5]=-a[5];
  res[6]=-a[6];
  res[7]=-a[7];
  res[8]=-a[8];
  res[9]=-a[9];
  return res;
}

/*******************************************************************************
 * gp_Tri_float
 * @argument {Tri} a
 * @argument {float} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator * (const Tri &a, const float &b) {
  Tri res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 10 muls / 0 adds
  res[0]=a[0]*b;
  res[1]=a[1]*b;
  res[2]=a[2]*b;
  res[3]=a[3]*b;
  res[4]=a[4]*b;
  res[5]=a[5]*b;
  res[6]=a[6]*b;
  res[7]=a[7]*b;
  res[8]=a[8]*b;
  res[9]=a[9]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Tri
 * @argument {float} a
 * @argument {Tri} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator * (const float &a, const Tri &b) {
  Tri res;
  // a
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 10 muls / 0 adds
  res[0]=a*b[0];
  res[1]=a*b[1];
  res[2]=a*b[2];
  res[3]=a*b[3];
  res[4]=a*b[4];
  res[5]=a*b[5];
  res[6]=a*b[6];
  res[7]=a*b[7];
  res[8]=a*b[8];
  res[9]=a*b[9];
  return res;
}

/*******************************************************************************
 * ip_Quad_Una
 * @argument {Quad} a
 * @argument {Una} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator | (const Quad &a, const Una &b) {
  Tri res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 16 muls / 8 adds
  res[0]=a[1]*b[4];
  res[1]=a[0]*b[2]+a[2]*b[4];
  res[2]=a[1]*b[2];
  res[3]=a[3]*b[4]-a[0]*b[1];
  res[4]=-a[1]*b[1];
  res[5]=-a[2]*b[1]-a[3]*b[2];
  res[6]=a[0]*b[0]+a[4]*b[4];
  res[7]=a[1]*b[0];
  res[8]=a[2]*b[0]-a[4]*b[2];
  res[9]=a[3]*b[0]+a[4]*b[1];
  return res;
}

/*******************************************************************************
 * gp_Quad_Una
 * @argument {Quad} a
 * @argument {Una} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Quad &a, const Una &b) {
  Odd res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 21 muls / 12 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=0.0;
  res[4]=0.0;
  res[5]=a[1]*b[4];
  res[6]=a[0]*b[2]+a[2]*b[4];
  res[7]=a[1]*b[2];
  res[8]=a[3]*b[4]-a[0]*b[1];
  res[9]=-a[1]*b[1];
  res[10]=-a[2]*b[1]-a[3]*b[2];
  res[11]=a[0]*b[0]+a[4]*b[4];
  res[12]=a[1]*b[0];
  res[13]=a[2]*b[0]-a[4]*b[2];
  res[14]=a[3]*b[0]+a[4]*b[1];
  res[15]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Quad_Bi
 * @argument {Quad} a
 * @argument {Bi} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator | (const Quad &a, const Bi &b) {
  Bi res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 18 muls / 13 adds
  res[0]=a[1]*b[8];
  res[1]=-a[1]*b[6];
  res[2]=-a[0]*b[4]-a[2]*b[6]-a[3]*b[8];
  res[3]=-a[1]*b[4];
  res[4]=a[1]*b[3];
  res[5]=a[0]*b[1]+a[2]*b[3]-a[4]*b[8];
  res[6]=a[1]*b[1];
  res[7]=a[3]*b[3]+a[4]*b[6]-a[0]*b[0];
  res[8]=-a[1]*b[0];
  res[9]=-a[2]*b[0]-a[3]*b[1]-a[4]*b[4];
  return res;
}

/*******************************************************************************
 * gp_Quad_Bi
 * @argument {Quad} a
 * @argument {Bi} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Quad &a, const Bi &b) {
  Even res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 34 muls / 25 adds
  res[0]=0.0;
  res[1]=a[1]*b[8];
  res[2]=-a[1]*b[6];
  res[3]=-a[0]*b[4]-a[2]*b[6]-a[3]*b[8];
  res[4]=-a[1]*b[4];
  res[5]=a[1]*b[3];
  res[6]=a[0]*b[1]+a[2]*b[3]-a[4]*b[8];
  res[7]=a[1]*b[1];
  res[8]=a[3]*b[3]+a[4]*b[6]-a[0]*b[0];
  res[9]=-a[1]*b[0];
  res[10]=-a[2]*b[0]-a[3]*b[1]-a[4]*b[4];
  res[11]=a[2]*b[8]+a[4]*b[3]-a[1]*b[9]-a[3]*b[6];
  res[12]=0.0;
  res[13]=a[0]*b[8]+a[3]*b[4]-a[1]*b[7]-a[4]*b[1];
  res[14]=a[1]*b[5]+a[4]*b[0]-a[0]*b[6]-a[2]*b[4];
  res[15]=a[0]*b[3]+a[2]*b[1]-a[1]*b[2]-a[3]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Quad_Tri
 * @argument {Quad} a
 * @argument {Tri} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Quad &a, const Tri &b) {
  Una res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 8 muls / 7 adds
  res[0]=-a[1]*b[7];
  res[1]=a[1]*b[4];
  res[2]=-a[1]*b[2];
  res[3]=-a[0]*b[0]-a[2]*b[2]-a[3]*b[4]-a[4]*b[7];
  res[4]=-a[1]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Quad_Tri
 * @argument {Quad} a
 * @argument {Tri} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Quad &a, const Tri &b) {
  Odd res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 26 muls / 19 adds
  res[0]=-a[1]*b[7];
  res[1]=a[1]*b[4];
  res[2]=-a[1]*b[2];
  res[3]=-a[0]*b[0]-a[2]*b[2]-a[3]*b[4]-a[4]*b[7];
  res[4]=-a[1]*b[0];
  res[5]=0.0;
  res[6]=a[3]*b[7]-a[1]*b[9]-a[4]*b[4];
  res[7]=0.0;
  res[8]=a[1]*b[8]+a[4]*b[2]-a[2]*b[7];
  res[9]=0.0;
  res[10]=a[1]*b[6]-a[0]*b[7]-a[4]*b[0];
  res[11]=a[2]*b[4]-a[1]*b[5]-a[3]*b[2];
  res[12]=0.0;
  res[13]=a[0]*b[4]+a[3]*b[0]-a[1]*b[3];
  res[14]=a[1]*b[1]-a[0]*b[2]-a[2]*b[0];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Quad_Quad
 * @argument {Quad} a
 * @argument {Quad} b
 * @returns {float}
 ******************************************************************************/
inline float operator | (const Quad &a, const Quad &b) {
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r
  // 1 muls / 1 adds
  return -a[1]*b[1];
}

/*******************************************************************************
 * gp_Quad_Quad
 * @argument {Quad} a
 * @argument {Quad} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Quad &a, const Quad &b) {
  Even res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 9 muls / 5 adds
  res[0]=-a[1]*b[1];
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[1]*b[4]-a[4]*b[1];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=a[3]*b[1]-a[1]*b[3];
  res[7]=0.0;
  res[8]=a[1]*b[2]-a[2]*b[1];
  res[9]=0.0;
  res[10]=a[1]*b[0]-a[0]*b[1];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Quad_Pent
 * @argument {Quad} a
 * @argument {Pent} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Quad &a, const Pent &b) {
  Una res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 1 muls / 0 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[1]*b[0];
  res[4]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Quad_Pent
 * @argument {Quad} a
 * @argument {Pent} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator * (const Quad &a, const Pent &b) {
  Una res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 1 muls / 0 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[1]*b[0];
  res[4]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Quad_Even
 * @argument {Quad} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Quad &a, const Even &b) {
  Even res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 24 muls / 14 adds
  res[0]=-a[1]*b[12];
  res[1]=a[1]*b[9];
  res[2]=-a[1]*b[7];
  res[3]=-a[0]*b[5]-a[2]*b[7]-a[3]*b[9];
  res[4]=-a[1]*b[5];
  res[5]=a[1]*b[4];
  res[6]=a[0]*b[2]+a[2]*b[4]-a[4]*b[9];
  res[7]=a[1]*b[2];
  res[8]=a[3]*b[4]+a[4]*b[7]-a[0]*b[1];
  res[9]=-a[1]*b[1];
  res[10]=-a[2]*b[1]-a[3]*b[2]-a[4]*b[5];
  res[11]=a[0]*b[0];
  res[12]=a[1]*b[0];
  res[13]=a[2]*b[0];
  res[14]=a[3]*b[0];
  res[15]=a[4]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Quad_Even
 * @argument {Quad} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Quad &a, const Even &b) {
  Even res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 48 muls / 36 adds
  res[0]=-a[1]*b[12];
  res[1]=a[1]*b[9];
  res[2]=-a[1]*b[7];
  res[3]=a[1]*b[15]-a[0]*b[5]-a[2]*b[7]-a[3]*b[9]-a[4]*b[12];
  res[4]=-a[1]*b[5];
  res[5]=a[1]*b[4];
  res[6]=a[0]*b[2]+a[2]*b[4]+a[3]*b[12]-a[1]*b[14]-a[4]*b[9];
  res[7]=a[1]*b[2];
  res[8]=a[1]*b[13]+a[3]*b[4]+a[4]*b[7]-a[0]*b[1]-a[2]*b[12];
  res[9]=-a[1]*b[1];
  res[10]=a[1]*b[11]-a[0]*b[12]-a[2]*b[1]-a[3]*b[2]-a[4]*b[5];
  res[11]=a[0]*b[0]+a[2]*b[9]+a[4]*b[4]-a[1]*b[10]-a[3]*b[7];
  res[12]=a[1]*b[0];
  res[13]=a[0]*b[9]+a[2]*b[0]+a[3]*b[5]-a[1]*b[8]-a[4]*b[2];
  res[14]=a[1]*b[6]+a[3]*b[0]+a[4]*b[1]-a[0]*b[7]-a[2]*b[5];
  res[15]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Quad_Odd
 * @argument {Quad} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Quad &a, const Odd &b) {
  Odd res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 25 muls / 15 adds
  res[0]=-a[1]*b[12];
  res[1]=a[1]*b[9];
  res[2]=-a[1]*b[7];
  res[3]=a[1]*b[15]-a[0]*b[5]-a[2]*b[7]-a[3]*b[9]-a[4]*b[12];
  res[4]=-a[1]*b[5];
  res[5]=a[1]*b[4];
  res[6]=a[0]*b[2]+a[2]*b[4];
  res[7]=a[1]*b[2];
  res[8]=a[3]*b[4]-a[0]*b[1];
  res[9]=-a[1]*b[1];
  res[10]=-a[2]*b[1]-a[3]*b[2];
  res[11]=a[0]*b[0]+a[4]*b[4];
  res[12]=a[1]*b[0];
  res[13]=a[2]*b[0]-a[4]*b[2];
  res[14]=a[3]*b[0]+a[4]*b[1];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Quad_Odd
 * @argument {Quad} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Quad &a, const Odd &b) {
  Odd res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 48 muls / 36 adds
  res[0]=-a[1]*b[12];
  res[1]=a[1]*b[9];
  res[2]=-a[1]*b[7];
  res[3]=a[1]*b[15]-a[0]*b[5]-a[2]*b[7]-a[3]*b[9]-a[4]*b[12];
  res[4]=-a[1]*b[5];
  res[5]=a[1]*b[4];
  res[6]=a[0]*b[2]+a[2]*b[4]+a[3]*b[12]-a[1]*b[14]-a[4]*b[9];
  res[7]=a[1]*b[2];
  res[8]=a[1]*b[13]+a[3]*b[4]+a[4]*b[7]-a[0]*b[1]-a[2]*b[12];
  res[9]=-a[1]*b[1];
  res[10]=a[1]*b[11]-a[0]*b[12]-a[2]*b[1]-a[3]*b[2]-a[4]*b[5];
  res[11]=a[0]*b[0]+a[2]*b[9]+a[4]*b[4]-a[1]*b[10]-a[3]*b[7];
  res[12]=a[1]*b[0];
  res[13]=a[0]*b[9]+a[2]*b[0]+a[3]*b[5]-a[1]*b[8]-a[4]*b[2];
  res[14]=a[1]*b[6]+a[3]*b[0]+a[4]*b[1]-a[0]*b[7]-a[2]*b[5];
  res[15]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * add_Quad_Quad
 * @argument {Quad} a
 * @argument {Quad} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator + (const Quad &a, const Quad &b) {
  Quad res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 0 muls / 5 adds
  res[0]=a[0]+b[0];
  res[1]=a[1]+b[1];
  res[2]=a[2]+b[2];
  res[3]=a[3]+b[3];
  res[4]=a[4]+b[4];
  return res;
}

/*******************************************************************************
 * sub_Quad_Quad
 * @argument {Quad} a
 * @argument {Quad} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator - (const Quad &a, const Quad &b) {
  Quad res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 0 muls / 5 adds
  res[0]=a[0]-b[0];
  res[1]=a[1]-b[1];
  res[2]=a[2]-b[2];
  res[3]=a[3]-b[3];
  res[4]=a[4]-b[4];
  return res;
}

/*******************************************************************************
 * reverse_Quad
 * @argument {Quad} a
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator ~ (const Quad &a) {
  Quad res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 0 muls / 0 adds
  res[0]=a[0];
  res[1]=a[1];
  res[2]=a[2];
  res[3]=a[3];
  res[4]=a[4];
  return res;
}

/*******************************************************************************
 * gp_Quad_float
 * @argument {Quad} a
 * @argument {float} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator * (const Quad &a, const float &b) {
  Quad res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 5 muls / 0 adds
  res[0]=a[0]*b;
  res[1]=a[1]*b;
  res[2]=a[2]*b;
  res[3]=a[3]*b;
  res[4]=a[4]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Quad
 * @argument {float} a
 * @argument {Quad} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator * (const float &a, const Quad &b) {
  Quad res;
  // a
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 5 muls / 0 adds
  res[0]=a*b[0];
  res[1]=a*b[1];
  res[2]=a*b[2];
  res[3]=a*b[3];
  res[4]=a*b[4];
  return res;
}

/*******************************************************************************
 * ip_Pent_Una
 * @argument {Pent} a
 * @argument {Una} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator | (const Pent &a, const Una &b) {
  Quad res;
  // a0 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 4 muls / 2 adds
  res[0]=a[0]*b[4];
  res[1]=0.0;
  res[2]=-a[0]*b[2];
  res[3]=a[0]*b[1];
  res[4]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Pent_Una
 * @argument {Pent} a
 * @argument {Una} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator * (const Pent &a, const Una &b) {
  Quad res;
  // a0 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 4 muls / 2 adds
  res[0]=a[0]*b[4];
  res[1]=0.0;
  res[2]=-a[0]*b[2];
  res[3]=a[0]*b[1];
  res[4]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Pent_Bi
 * @argument {Pent} a
 * @argument {Bi} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator | (const Pent &a, const Bi &b) {
  Tri res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 6 muls / 4 adds
  res[0]=0.0;
  res[1]=-a[0]*b[8];
  res[2]=0.0;
  res[3]=a[0]*b[6];
  res[4]=0.0;
  res[5]=-a[0]*b[4];
  res[6]=-a[0]*b[3];
  res[7]=0.0;
  res[8]=a[0]*b[1];
  res[9]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Pent_Bi
 * @argument {Pent} a
 * @argument {Bi} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator * (const Pent &a, const Bi &b) {
  Tri res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 6 muls / 4 adds
  res[0]=0.0;
  res[1]=-a[0]*b[8];
  res[2]=0.0;
  res[3]=a[0]*b[6];
  res[4]=0.0;
  res[5]=-a[0]*b[4];
  res[6]=-a[0]*b[3];
  res[7]=0.0;
  res[8]=a[0]*b[1];
  res[9]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Pent_Tri
 * @argument {Pent} a
 * @argument {Tri} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator | (const Pent &a, const Tri &b) {
  Bi res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 4 muls / 2 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=-a[0]*b[7];
  res[3]=0.0;
  res[4]=0.0;
  res[5]=a[0]*b[4];
  res[6]=0.0;
  res[7]=-a[0]*b[2];
  res[8]=0.0;
  res[9]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Pent_Tri
 * @argument {Pent} a
 * @argument {Tri} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator * (const Pent &a, const Tri &b) {
  Bi res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 4 muls / 2 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=-a[0]*b[7];
  res[3]=0.0;
  res[4]=0.0;
  res[5]=a[0]*b[4];
  res[6]=0.0;
  res[7]=-a[0]*b[2];
  res[8]=0.0;
  res[9]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Pent_Quad
 * @argument {Pent} a
 * @argument {Quad} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator | (const Pent &a, const Quad &b) {
  Una res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 1 muls / 0 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[0]*b[1];
  res[4]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Pent_Quad
 * @argument {Pent} a
 * @argument {Quad} b
 * @returns {Una}
 ******************************************************************************/
inline Una operator * (const Pent &a, const Quad &b) {
  Una res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅
  // 1 muls / 0 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[0]*b[1];
  res[4]=0.0;
  return res;
}

/*******************************************************************************
 * ip_Pent_Pent
 * @argument {Pent} a
 * @argument {Pent} b
 * @returns {float}
 ******************************************************************************/
inline float operator | (const Pent &a, const Pent &b) {
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}

/*******************************************************************************
 * gp_Pent_Pent
 * @argument {Pent} a
 * @argument {Pent} b
 * @returns {float}
 ******************************************************************************/
inline float operator * (const Pent &a, const Pent &b) {
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}

/*******************************************************************************
 * ip_Pent_Even
 * @argument {Pent} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Pent &a, const Even &b) {
  Odd res;
  // a0 e₁₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[0]*b[12];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=-a[0]*b[9];
  res[7]=0.0;
  res[8]=a[0]*b[7];
  res[9]=0.0;
  res[10]=-a[0]*b[5];
  res[11]=-a[0]*b[4];
  res[12]=0.0;
  res[13]=a[0]*b[2];
  res[14]=-a[0]*b[1];
  res[15]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Pent_Even
 * @argument {Pent} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Pent &a, const Even &b) {
  Odd res;
  // a0 e₁₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[0]*b[12];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=-a[0]*b[9];
  res[7]=0.0;
  res[8]=a[0]*b[7];
  res[9]=0.0;
  res[10]=-a[0]*b[5];
  res[11]=-a[0]*b[4];
  res[12]=0.0;
  res[13]=a[0]*b[2];
  res[14]=-a[0]*b[1];
  res[15]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Pent_Odd
 * @argument {Pent} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Pent &a, const Odd &b) {
  Even res;
  // a0 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=-a[0]*b[12];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=a[0]*b[9];
  res[7]=0.0;
  res[8]=-a[0]*b[7];
  res[9]=0.0;
  res[10]=a[0]*b[5];
  res[11]=a[0]*b[4];
  res[12]=0.0;
  res[13]=-a[0]*b[2];
  res[14]=a[0]*b[1];
  res[15]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Pent_Odd
 * @argument {Pent} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Pent &a, const Odd &b) {
  Even res;
  // a0 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=-a[0]*b[12];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=a[0]*b[9];
  res[7]=0.0;
  res[8]=-a[0]*b[7];
  res[9]=0.0;
  res[10]=a[0]*b[5];
  res[11]=a[0]*b[4];
  res[12]=0.0;
  res[13]=-a[0]*b[2];
  res[14]=a[0]*b[1];
  res[15]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * add_Pent_Pent
 * @argument {Pent} a
 * @argument {Pent} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator + (const Pent &a, const Pent &b) {
  Pent res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃₄₅
  // 0 muls / 1 adds
  res[0]=a[0]+b[0];
  return res;
}

/*******************************************************************************
 * sub_Pent_Pent
 * @argument {Pent} a
 * @argument {Pent} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator - (const Pent &a, const Pent &b) {
  Pent res;
  // a0 e₁₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃₄₅
  // 0 muls / 1 adds
  res[0]=a[0]-b[0];
  return res;
}

/*******************************************************************************
 * reverse_Pent
 * @argument {Pent} a
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator ~ (const Pent &a) {
  Pent res;
  // a0 e₁₂₃₄₅
  // -> r0 e₁₂₃₄₅
  // 0 muls / 0 adds
  res[0]=a[0];
  return res;
}

/*******************************************************************************
 * gp_Pent_float
 * @argument {Pent} a
 * @argument {float} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator * (const Pent &a, const float &b) {
  Pent res;
  // a0 e₁₂₃₄₅
  // b
  // -> r0 e₁₂₃₄₅
  // 1 muls / 0 adds
  res[0]=a[0]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Pent
 * @argument {float} a
 * @argument {Pent} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator * (const float &a, const Pent &b) {
  Pent res;
  // a
  // b0 e₁₂₃₄₅
  // -> r0 e₁₂₃₄₅
  // 1 muls / 0 adds
  res[0]=a*b[0];
  return res;
}

/*******************************************************************************
 * ip_Even_Una
 * @argument {Even} a
 * @argument {Una} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Even &a, const Una &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 37 muls / 24 adds
  res[0]=a[0]*b[0]+a[4]*b[4]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[0]*b[1]+a[1]*b[0]+a[7]*b[4]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[2]*b[0]+a[5]*b[1]+a[9]*b[4];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[3]*b[0]+a[6]*b[1]+a[8]*b[2];
  res[4]=a[0]*b[4]+a[4]*b[0]+a[7]*b[1]+a[9]*b[2];
  res[5]=a[12]*b[4];
  res[6]=a[11]*b[2]+a[13]*b[4];
  res[7]=a[12]*b[2];
  res[8]=a[14]*b[4]-a[11]*b[1];
  res[9]=-a[12]*b[1];
  res[10]=-a[13]*b[1]-a[14]*b[2];
  res[11]=a[11]*b[0]+a[15]*b[4];
  res[12]=a[12]*b[0];
  res[13]=a[13]*b[0]-a[15]*b[2];
  res[14]=a[14]*b[0]+a[15]*b[1];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Even_Una
 * @argument {Even} a
 * @argument {Una} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Even &a, const Una &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 72 muls / 56 adds
  res[0]=a[0]*b[0]+a[4]*b[4]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[0]*b[1]+a[1]*b[0]+a[7]*b[4]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[2]*b[0]+a[5]*b[1]+a[9]*b[4];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[3]*b[0]+a[6]*b[1]+a[8]*b[2];
  res[4]=a[0]*b[4]+a[4]*b[0]+a[7]*b[1]+a[9]*b[2];
  res[5]=a[12]*b[4]+a[1]*b[2]+a[5]*b[0]-a[2]*b[1];
  res[6]=a[11]*b[2]+a[13]*b[4]+a[1]*b[3]+a[6]*b[0]-a[3]*b[1];
  res[7]=a[12]*b[2]+a[1]*b[4]+a[7]*b[0]-a[4]*b[1];
  res[8]=a[14]*b[4]+a[2]*b[3]+a[8]*b[0]-a[11]*b[1]-a[3]*b[2];
  res[9]=a[2]*b[4]+a[9]*b[0]-a[12]*b[1]-a[4]*b[2];
  res[10]=a[10]*b[0]+a[3]*b[4]-a[13]*b[1]-a[14]*b[2]-a[4]*b[3];
  res[11]=a[11]*b[0]+a[15]*b[4]+a[5]*b[3]+a[8]*b[1]-a[6]*b[2];
  res[12]=a[12]*b[0]+a[5]*b[4]+a[9]*b[1]-a[7]*b[2];
  res[13]=a[10]*b[1]+a[13]*b[0]+a[6]*b[4]-a[15]*b[2]-a[7]*b[3];
  res[14]=a[10]*b[2]+a[14]*b[0]+a[15]*b[1]+a[8]*b[4]-a[9]*b[3];
  res[15]=a[11]*b[4]+a[13]*b[2]+a[15]*b[0]-a[12]*b[3]-a[14]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Even_Bi
 * @argument {Even} a
 * @argument {Bi} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Even &a, const Bi &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 34 muls / 23 adds
  res[0]=a[4]*b[3]+a[7]*b[6]+a[9]*b[8]-a[1]*b[0]-a[2]*b[1]-a[5]*b[4];
  res[1]=a[0]*b[0]+a[12]*b[8];
  res[2]=a[0]*b[1]-a[12]*b[6];
  res[3]=a[0]*b[2]-a[11]*b[4]-a[13]*b[6]-a[14]*b[8];
  res[4]=a[0]*b[3]-a[12]*b[4];
  res[5]=a[0]*b[4]+a[12]*b[3];
  res[6]=a[0]*b[5]+a[11]*b[1]+a[13]*b[3]-a[15]*b[8];
  res[7]=a[0]*b[6]+a[12]*b[1];
  res[8]=a[0]*b[7]+a[14]*b[3]+a[15]*b[6]-a[11]*b[0];
  res[9]=a[0]*b[8]-a[12]*b[0];
  res[10]=a[0]*b[9]-a[13]*b[0]-a[14]*b[1]-a[15]*b[4];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Even_Bi
 * @argument {Even} a
 * @argument {Bi} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Even &a, const Bi &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 128 muls / 112 adds
  res[0]=a[4]*b[3]+a[7]*b[6]+a[9]*b[8]-a[1]*b[0]-a[2]*b[1]-a[5]*b[4];
  res[1]=a[0]*b[0]+a[12]*b[8]+a[2]*b[4]+a[7]*b[3]-a[4]*b[6]-a[5]*b[1];
  res[2]=a[0]*b[1]+a[5]*b[0]+a[9]*b[3]-a[12]*b[6]-a[1]*b[4]-a[4]*b[8];
  res[3]=a[0]*b[2]+a[10]*b[3]+a[6]*b[0]+a[8]*b[1]-a[11]*b[4]-a[13]*b[6]-a[14]*b[8]-a[1]*b[5]-a[2]*b[7]-a[4]*b[9];
  res[4]=a[0]*b[3]+a[7]*b[0]+a[9]*b[1]-a[12]*b[4]-a[1]*b[6]-a[2]*b[8];
  res[5]=a[0]*b[4]+a[12]*b[3]+a[1]*b[1]+a[9]*b[6]-a[2]*b[0]-a[7]*b[8];
  res[6]=a[0]*b[5]+a[10]*b[6]+a[11]*b[1]+a[13]*b[3]+a[1]*b[2]+a[8]*b[4]-a[15]*b[8]-a[3]*b[0]-a[5]*b[7]-a[7]*b[9];
  res[7]=a[0]*b[6]+a[12]*b[1]+a[1]*b[3]+a[9]*b[4]-a[4]*b[0]-a[5]*b[8];
  res[8]=a[0]*b[7]+a[10]*b[8]+a[14]*b[3]+a[15]*b[6]+a[2]*b[2]+a[5]*b[5]-a[11]*b[0]-a[3]*b[1]-a[6]*b[4]-a[9]*b[9];
  res[9]=a[0]*b[8]+a[2]*b[3]+a[5]*b[6]-a[12]*b[0]-a[4]*b[1]-a[7]*b[4];
  res[10]=a[0]*b[9]+a[3]*b[3]+a[6]*b[6]+a[8]*b[8]-a[13]*b[0]-a[14]*b[1]-a[15]*b[4]-a[4]*b[2]-a[7]*b[5]-a[9]*b[7];
  res[11]=a[13]*b[8]+a[15]*b[3]+a[1]*b[7]+a[3]*b[4]+a[5]*b[2]+a[8]*b[0]-a[12]*b[9]-a[14]*b[6]-a[2]*b[5]-a[6]*b[1];
  res[12]=a[1]*b[8]+a[4]*b[4]+a[5]*b[3]+a[9]*b[0]-a[2]*b[6]-a[7]*b[1];
  res[13]=a[10]*b[0]+a[11]*b[8]+a[14]*b[4]+a[1]*b[9]+a[4]*b[5]+a[6]*b[3]-a[12]*b[7]-a[15]*b[1]-a[3]*b[6]-a[7]*b[2];
  res[14]=a[10]*b[1]+a[12]*b[5]+a[15]*b[0]+a[2]*b[9]+a[4]*b[7]+a[8]*b[3]-a[11]*b[6]-a[13]*b[4]-a[3]*b[8]-a[9]*b[2];
  res[15]=a[10]*b[4]+a[11]*b[3]+a[13]*b[1]+a[5]*b[9]+a[7]*b[7]+a[8]*b[6]-a[12]*b[2]-a[14]*b[0]-a[6]*b[8]-a[9]*b[5];
  return res;
}

/*******************************************************************************
 * ip_Even_Tri
 * @argument {Even} a
 * @argument {Tri} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Even &a, const Tri &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 36 muls / 24 adds
  res[0]=a[7]*b[2]+a[9]*b[4]-a[12]*b[7]-a[5]*b[0];
  res[1]=a[12]*b[4]+a[2]*b[0]+a[9]*b[7]-a[4]*b[2];
  res[2]=-a[12]*b[2]-a[1]*b[0]-a[4]*b[4]-a[7]*b[7];
  res[3]=-a[11]*b[0]-a[13]*b[2]-a[14]*b[4]-a[15]*b[7]-a[1]*b[1]-a[2]*b[3]-a[4]*b[5]-a[5]*b[6]-a[7]*b[8]-a[9]*b[9];
  res[4]=-a[12]*b[0]-a[1]*b[2]-a[2]*b[4]-a[5]*b[7];
  res[5]=a[0]*b[0];
  res[6]=a[0]*b[1];
  res[7]=a[0]*b[2];
  res[8]=a[0]*b[3];
  res[9]=a[0]*b[4];
  res[10]=a[0]*b[5];
  res[11]=a[0]*b[6];
  res[12]=a[0]*b[7];
  res[13]=a[0]*b[8];
  res[14]=a[0]*b[9];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Even_Tri
 * @argument {Even} a
 * @argument {Tri} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Even &a, const Tri &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 112 muls / 99 adds
  res[0]=a[7]*b[2]+a[9]*b[4]-a[12]*b[7]-a[5]*b[0];
  res[1]=a[12]*b[4]+a[2]*b[0]+a[9]*b[7]-a[4]*b[2];
  res[2]=-a[12]*b[2]-a[1]*b[0]-a[4]*b[4]-a[7]*b[7];
  res[3]=-a[11]*b[0]-a[13]*b[2]-a[14]*b[4]-a[15]*b[7]-a[1]*b[1]-a[2]*b[3]-a[4]*b[5]-a[5]*b[6]-a[7]*b[8]-a[9]*b[9];
  res[4]=-a[12]*b[0]-a[1]*b[2]-a[2]*b[4]-a[5]*b[7];
  res[5]=a[0]*b[0]+a[4]*b[7]+a[9]*b[2]-a[7]*b[4];
  res[6]=a[0]*b[1]+a[10]*b[2]+a[14]*b[7]+a[2]*b[6]+a[4]*b[8]+a[8]*b[0]-a[12]*b[9]-a[15]*b[4]-a[5]*b[3]-a[7]*b[5];
  res[7]=a[0]*b[2]+a[2]*b[7]+a[9]*b[0]-a[5]*b[4];
  res[8]=a[0]*b[3]+a[10]*b[4]+a[12]*b[8]+a[15]*b[2]+a[4]*b[9]+a[5]*b[1]-a[13]*b[7]-a[1]*b[6]-a[6]*b[0]-a[9]*b[5];
  res[9]=a[0]*b[4]+a[5]*b[2]-a[1]*b[7]-a[7]*b[0];
  res[10]=a[0]*b[5]+a[12]*b[6]+a[6]*b[2]+a[8]*b[4]-a[11]*b[7]-a[15]*b[0]-a[1]*b[8]-a[2]*b[9]-a[7]*b[1]-a[9]*b[3];
  res[11]=a[0]*b[6]+a[10]*b[7]+a[13]*b[4]+a[1]*b[3]+a[3]*b[0]+a[7]*b[9]-a[12]*b[5]-a[14]*b[2]-a[2]*b[1]-a[9]*b[8];
  res[12]=a[0]*b[7]+a[1]*b[4]+a[4]*b[0]-a[2]*b[2];
  res[13]=a[0]*b[8]+a[11]*b[4]+a[14]*b[0]+a[1]*b[5]+a[4]*b[1]+a[8]*b[7]-a[12]*b[3]-a[3]*b[2]-a[5]*b[9]-a[9]*b[6];
  res[14]=a[0]*b[9]+a[12]*b[1]+a[2]*b[5]+a[4]*b[3]+a[5]*b[8]+a[7]*b[6]-a[11]*b[2]-a[13]*b[0]-a[3]*b[4]-a[6]*b[7];
  res[15]=a[10]*b[0]+a[1]*b[9]+a[3]*b[7]+a[5]*b[5]+a[7]*b[3]+a[8]*b[2]-a[2]*b[8]-a[4]*b[6]-a[6]*b[4]-a[9]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Even_Quad
 * @argument {Even} a
 * @argument {Quad} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Even &a, const Quad &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 24 muls / 14 adds
  res[0]=-a[12]*b[1];
  res[1]=a[9]*b[1];
  res[2]=-a[7]*b[1];
  res[3]=-a[5]*b[0]-a[7]*b[2]-a[9]*b[3];
  res[4]=-a[5]*b[1];
  res[5]=a[4]*b[1];
  res[6]=a[2]*b[0]+a[4]*b[2]-a[9]*b[4];
  res[7]=a[2]*b[1];
  res[8]=a[4]*b[3]+a[7]*b[4]-a[1]*b[0];
  res[9]=-a[1]*b[1];
  res[10]=-a[1]*b[2]-a[2]*b[3]-a[5]*b[4];
  res[11]=a[0]*b[0];
  res[12]=a[0]*b[1];
  res[13]=a[0]*b[2];
  res[14]=a[0]*b[3];
  res[15]=a[0]*b[4];
  return res;
}

/*******************************************************************************
 * gp_Even_Quad
 * @argument {Even} a
 * @argument {Quad} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Even &a, const Quad &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 48 muls / 36 adds
  res[0]=-a[12]*b[1];
  res[1]=a[9]*b[1];
  res[2]=-a[7]*b[1];
  res[3]=a[12]*b[4]-a[15]*b[1]-a[5]*b[0]-a[7]*b[2]-a[9]*b[3];
  res[4]=-a[5]*b[1];
  res[5]=a[4]*b[1];
  res[6]=a[14]*b[1]+a[2]*b[0]+a[4]*b[2]-a[12]*b[3]-a[9]*b[4];
  res[7]=a[2]*b[1];
  res[8]=a[12]*b[2]+a[4]*b[3]+a[7]*b[4]-a[13]*b[1]-a[1]*b[0];
  res[9]=-a[1]*b[1];
  res[10]=a[12]*b[0]-a[11]*b[1]-a[1]*b[2]-a[2]*b[3]-a[5]*b[4];
  res[11]=a[0]*b[0]+a[10]*b[1]+a[7]*b[3]-a[4]*b[4]-a[9]*b[2];
  res[12]=a[0]*b[1];
  res[13]=a[0]*b[2]+a[2]*b[4]+a[8]*b[1]-a[5]*b[3]-a[9]*b[0];
  res[14]=a[0]*b[3]+a[5]*b[2]+a[7]*b[0]-a[1]*b[4]-a[6]*b[1];
  res[15]=a[0]*b[4]+a[1]*b[3]+a[3]*b[1]-a[2]*b[2]-a[4]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Even_Pent
 * @argument {Even} a
 * @argument {Pent} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Even &a, const Pent &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[12]*b[0];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=-a[9]*b[0];
  res[7]=0.0;
  res[8]=a[7]*b[0];
  res[9]=0.0;
  res[10]=-a[5]*b[0];
  res[11]=-a[4]*b[0];
  res[12]=0.0;
  res[13]=a[2]*b[0];
  res[14]=-a[1]*b[0];
  res[15]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Even_Pent
 * @argument {Even} a
 * @argument {Pent} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Even &a, const Pent &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=a[12]*b[0];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=-a[9]*b[0];
  res[7]=0.0;
  res[8]=a[7]*b[0];
  res[9]=0.0;
  res[10]=-a[5]*b[0];
  res[11]=-a[4]*b[0];
  res[12]=0.0;
  res[13]=a[2]*b[0];
  res[14]=-a[1]*b[0];
  res[15]=a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Even_Even
 * @argument {Even} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Even &a, const Even &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 74 muls / 58 adds
  res[0]=a[0]*b[0]+a[4]*b[4]+a[7]*b[7]+a[9]*b[9]-a[12]*b[12]-a[1]*b[1]-a[2]*b[2]-a[5]*b[5];
  res[1]=a[0]*b[1]+a[12]*b[9]+a[1]*b[0]+a[9]*b[12];
  res[2]=a[0]*b[2]+a[2]*b[0]-a[12]*b[7]-a[7]*b[12];
  res[3]=a[0]*b[3]+a[3]*b[0]-a[11]*b[5]-a[13]*b[7]-a[14]*b[9]-a[5]*b[11]-a[7]*b[13]-a[9]*b[14];
  res[4]=a[0]*b[4]+a[4]*b[0]-a[12]*b[5]-a[5]*b[12];
  res[5]=a[0]*b[5]+a[12]*b[4]+a[4]*b[12]+a[5]*b[0];
  res[6]=a[0]*b[6]+a[11]*b[2]+a[13]*b[4]+a[2]*b[11]+a[4]*b[13]+a[6]*b[0]-a[15]*b[9]-a[9]*b[15];
  res[7]=a[0]*b[7]+a[12]*b[2]+a[2]*b[12]+a[7]*b[0];
  res[8]=a[0]*b[8]+a[14]*b[4]+a[15]*b[7]+a[4]*b[14]+a[7]*b[15]+a[8]*b[0]-a[11]*b[1]-a[1]*b[11];
  res[9]=a[0]*b[9]+a[9]*b[0]-a[12]*b[1]-a[1]*b[12];
  res[10]=a[0]*b[10]+a[10]*b[0]-a[13]*b[1]-a[14]*b[2]-a[15]*b[5]-a[1]*b[13]-a[2]*b[14]-a[5]*b[15];
  res[11]=a[0]*b[11]+a[11]*b[0];
  res[12]=a[0]*b[12]+a[12]*b[0];
  res[13]=a[0]*b[13]+a[13]*b[0];
  res[14]=a[0]*b[14]+a[14]*b[0];
  res[15]=a[0]*b[15]+a[15]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Even_Even
 * @argument {Even} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Even &a, const Even &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 192 muls / 176 adds
  res[0]=a[0]*b[0]+a[4]*b[4]+a[7]*b[7]+a[9]*b[9]-a[12]*b[12]-a[1]*b[1]-a[2]*b[2]-a[5]*b[5];
  res[1]=a[0]*b[1]+a[12]*b[9]+a[1]*b[0]+a[2]*b[5]+a[7]*b[4]+a[9]*b[12]-a[4]*b[7]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[2]*b[0]+a[5]*b[1]+a[9]*b[4]-a[12]*b[7]-a[1]*b[5]-a[4]*b[9]-a[7]*b[12];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[12]*b[15]+a[3]*b[0]+a[6]*b[1]+a[8]*b[2]-a[11]*b[5]-a[13]*b[7]-a[14]*b[9]-a[15]*b[12]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10]-a[5]*b[11]-a[7]*b[13]-a[9]*b[14];
  res[4]=a[0]*b[4]+a[4]*b[0]+a[7]*b[1]+a[9]*b[2]-a[12]*b[5]-a[1]*b[7]-a[2]*b[9]-a[5]*b[12];
  res[5]=a[0]*b[5]+a[12]*b[4]+a[1]*b[2]+a[4]*b[12]+a[5]*b[0]+a[9]*b[7]-a[2]*b[1]-a[7]*b[9];
  res[6]=a[0]*b[6]+a[10]*b[7]+a[11]*b[2]+a[13]*b[4]+a[14]*b[12]+a[1]*b[3]+a[2]*b[11]+a[4]*b[13]+a[6]*b[0]+a[8]*b[5]-a[12]*b[14]-a[15]*b[9]-a[3]*b[1]-a[5]*b[8]-a[7]*b[10]-a[9]*b[15];
  res[7]=a[0]*b[7]+a[12]*b[2]+a[1]*b[4]+a[2]*b[12]+a[7]*b[0]+a[9]*b[5]-a[4]*b[1]-a[5]*b[9];
  res[8]=a[0]*b[8]+a[10]*b[9]+a[12]*b[13]+a[14]*b[4]+a[15]*b[7]+a[2]*b[3]+a[4]*b[14]+a[5]*b[6]+a[7]*b[15]+a[8]*b[0]-a[11]*b[1]-a[13]*b[12]-a[1]*b[11]-a[3]*b[2]-a[6]*b[5]-a[9]*b[10];
  res[9]=a[0]*b[9]+a[2]*b[4]+a[5]*b[7]+a[9]*b[0]-a[12]*b[1]-a[1]*b[12]-a[4]*b[2]-a[7]*b[5];
  res[10]=a[0]*b[10]+a[10]*b[0]+a[12]*b[11]+a[3]*b[4]+a[6]*b[7]+a[8]*b[9]-a[11]*b[12]-a[13]*b[1]-a[14]*b[2]-a[15]*b[5]-a[1]*b[13]-a[2]*b[14]-a[4]*b[3]-a[5]*b[15]-a[7]*b[6]-a[9]*b[8];
  res[11]=a[0]*b[11]+a[10]*b[12]+a[11]*b[0]+a[13]*b[9]+a[15]*b[4]+a[1]*b[8]+a[3]*b[5]+a[5]*b[3]+a[7]*b[14]+a[8]*b[1]-a[12]*b[10]-a[14]*b[7]-a[2]*b[6]-a[4]*b[15]-a[6]*b[2]-a[9]*b[13];
  res[12]=a[0]*b[12]+a[12]*b[0]+a[1]*b[9]+a[4]*b[5]+a[5]*b[4]+a[9]*b[1]-a[2]*b[7]-a[7]*b[2];
  res[13]=a[0]*b[13]+a[10]*b[1]+a[11]*b[9]+a[13]*b[0]+a[14]*b[5]+a[1]*b[10]+a[2]*b[15]+a[4]*b[6]+a[6]*b[4]+a[8]*b[12]-a[12]*b[8]-a[15]*b[2]-a[3]*b[7]-a[5]*b[14]-a[7]*b[3]-a[9]*b[11];
  res[14]=a[0]*b[14]+a[10]*b[2]+a[12]*b[6]+a[14]*b[0]+a[15]*b[1]+a[2]*b[10]+a[4]*b[8]+a[5]*b[13]+a[7]*b[11]+a[8]*b[4]-a[11]*b[7]-a[13]*b[5]-a[1]*b[15]-a[3]*b[9]-a[6]*b[12]-a[9]*b[3];
  res[15]=a[0]*b[15]+a[10]*b[5]+a[11]*b[4]+a[13]*b[2]+a[15]*b[0]+a[1]*b[14]+a[3]*b[12]+a[5]*b[10]+a[7]*b[8]+a[8]*b[7]-a[12]*b[3]-a[14]*b[1]-a[2]*b[13]-a[4]*b[11]-a[6]*b[9]-a[9]*b[6];
  return res;
}

/*******************************************************************************
 * ip_Even_Odd
 * @argument {Even} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Even &a, const Odd &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 81 muls / 65 adds
  res[0]=a[0]*b[0]+a[4]*b[4]+a[7]*b[7]+a[9]*b[9]-a[12]*b[12]-a[1]*b[1]-a[2]*b[2]-a[5]*b[5];
  res[1]=a[0]*b[1]+a[12]*b[9]+a[1]*b[0]+a[2]*b[5]+a[7]*b[4]+a[9]*b[12]-a[4]*b[7]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[2]*b[0]+a[5]*b[1]+a[9]*b[4]-a[12]*b[7]-a[1]*b[5]-a[4]*b[9]-a[7]*b[12];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[12]*b[15]+a[3]*b[0]+a[6]*b[1]+a[8]*b[2]-a[11]*b[5]-a[13]*b[7]-a[14]*b[9]-a[15]*b[12]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10]-a[5]*b[11]-a[7]*b[13]-a[9]*b[14];
  res[4]=a[0]*b[4]+a[4]*b[0]+a[7]*b[1]+a[9]*b[2]-a[12]*b[5]-a[1]*b[7]-a[2]*b[9]-a[5]*b[12];
  res[5]=a[0]*b[5]+a[12]*b[4];
  res[6]=a[0]*b[6]+a[11]*b[2]+a[13]*b[4]-a[9]*b[15];
  res[7]=a[0]*b[7]+a[12]*b[2];
  res[8]=a[0]*b[8]+a[14]*b[4]+a[7]*b[15]-a[11]*b[1];
  res[9]=a[0]*b[9]-a[12]*b[1];
  res[10]=a[0]*b[10]-a[13]*b[1]-a[14]*b[2]-a[5]*b[15];
  res[11]=a[0]*b[11]+a[11]*b[0]+a[15]*b[4]-a[4]*b[15];
  res[12]=a[0]*b[12]+a[12]*b[0];
  res[13]=a[0]*b[13]+a[13]*b[0]+a[2]*b[15]-a[15]*b[2];
  res[14]=a[0]*b[14]+a[14]*b[0]+a[15]*b[1]-a[1]*b[15];
  res[15]=a[0]*b[15];
  return res;
}

/*******************************************************************************
 * gp_Even_Odd
 * @argument {Even} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Even &a, const Odd &b) {
  Odd res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 192 muls / 176 adds
  res[0]=a[0]*b[0]+a[4]*b[4]+a[7]*b[7]+a[9]*b[9]-a[12]*b[12]-a[1]*b[1]-a[2]*b[2]-a[5]*b[5];
  res[1]=a[0]*b[1]+a[12]*b[9]+a[1]*b[0]+a[2]*b[5]+a[7]*b[4]+a[9]*b[12]-a[4]*b[7]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[2]*b[0]+a[5]*b[1]+a[9]*b[4]-a[12]*b[7]-a[1]*b[5]-a[4]*b[9]-a[7]*b[12];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[12]*b[15]+a[3]*b[0]+a[6]*b[1]+a[8]*b[2]-a[11]*b[5]-a[13]*b[7]-a[14]*b[9]-a[15]*b[12]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10]-a[5]*b[11]-a[7]*b[13]-a[9]*b[14];
  res[4]=a[0]*b[4]+a[4]*b[0]+a[7]*b[1]+a[9]*b[2]-a[12]*b[5]-a[1]*b[7]-a[2]*b[9]-a[5]*b[12];
  res[5]=a[0]*b[5]+a[12]*b[4]+a[1]*b[2]+a[4]*b[12]+a[5]*b[0]+a[9]*b[7]-a[2]*b[1]-a[7]*b[9];
  res[6]=a[0]*b[6]+a[10]*b[7]+a[11]*b[2]+a[13]*b[4]+a[14]*b[12]+a[1]*b[3]+a[2]*b[11]+a[4]*b[13]+a[6]*b[0]+a[8]*b[5]-a[12]*b[14]-a[15]*b[9]-a[3]*b[1]-a[5]*b[8]-a[7]*b[10]-a[9]*b[15];
  res[7]=a[0]*b[7]+a[12]*b[2]+a[1]*b[4]+a[2]*b[12]+a[7]*b[0]+a[9]*b[5]-a[4]*b[1]-a[5]*b[9];
  res[8]=a[0]*b[8]+a[10]*b[9]+a[12]*b[13]+a[14]*b[4]+a[15]*b[7]+a[2]*b[3]+a[4]*b[14]+a[5]*b[6]+a[7]*b[15]+a[8]*b[0]-a[11]*b[1]-a[13]*b[12]-a[1]*b[11]-a[3]*b[2]-a[6]*b[5]-a[9]*b[10];
  res[9]=a[0]*b[9]+a[2]*b[4]+a[5]*b[7]+a[9]*b[0]-a[12]*b[1]-a[1]*b[12]-a[4]*b[2]-a[7]*b[5];
  res[10]=a[0]*b[10]+a[10]*b[0]+a[12]*b[11]+a[3]*b[4]+a[6]*b[7]+a[8]*b[9]-a[11]*b[12]-a[13]*b[1]-a[14]*b[2]-a[15]*b[5]-a[1]*b[13]-a[2]*b[14]-a[4]*b[3]-a[5]*b[15]-a[7]*b[6]-a[9]*b[8];
  res[11]=a[0]*b[11]+a[10]*b[12]+a[11]*b[0]+a[13]*b[9]+a[15]*b[4]+a[1]*b[8]+a[3]*b[5]+a[5]*b[3]+a[7]*b[14]+a[8]*b[1]-a[12]*b[10]-a[14]*b[7]-a[2]*b[6]-a[4]*b[15]-a[6]*b[2]-a[9]*b[13];
  res[12]=a[0]*b[12]+a[12]*b[0]+a[1]*b[9]+a[4]*b[5]+a[5]*b[4]+a[9]*b[1]-a[2]*b[7]-a[7]*b[2];
  res[13]=a[0]*b[13]+a[10]*b[1]+a[11]*b[9]+a[13]*b[0]+a[14]*b[5]+a[1]*b[10]+a[2]*b[15]+a[4]*b[6]+a[6]*b[4]+a[8]*b[12]-a[12]*b[8]-a[15]*b[2]-a[3]*b[7]-a[5]*b[14]-a[7]*b[3]-a[9]*b[11];
  res[14]=a[0]*b[14]+a[10]*b[2]+a[12]*b[6]+a[14]*b[0]+a[15]*b[1]+a[2]*b[10]+a[4]*b[8]+a[5]*b[13]+a[7]*b[11]+a[8]*b[4]-a[11]*b[7]-a[13]*b[5]-a[1]*b[15]-a[3]*b[9]-a[6]*b[12]-a[9]*b[3];
  res[15]=a[0]*b[15]+a[10]*b[5]+a[11]*b[4]+a[13]*b[2]+a[15]*b[0]+a[1]*b[14]+a[3]*b[12]+a[5]*b[10]+a[7]*b[8]+a[8]*b[7]-a[12]*b[3]-a[14]*b[1]-a[2]*b[13]-a[4]*b[11]-a[6]*b[9]-a[9]*b[6];
  return res;
}

/*******************************************************************************
 * add_Even_Even
 * @argument {Even} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator + (const Even &a, const Even &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 16 adds
  res[0]=a[0]+b[0];
  res[1]=a[1]+b[1];
  res[2]=a[2]+b[2];
  res[3]=a[3]+b[3];
  res[4]=a[4]+b[4];
  res[5]=a[5]+b[5];
  res[6]=a[6]+b[6];
  res[7]=a[7]+b[7];
  res[8]=a[8]+b[8];
  res[9]=a[9]+b[9];
  res[10]=a[10]+b[10];
  res[11]=a[11]+b[11];
  res[12]=a[12]+b[12];
  res[13]=a[13]+b[13];
  res[14]=a[14]+b[14];
  res[15]=a[15]+b[15];
  return res;
}

/*******************************************************************************
 * sub_Even_Even
 * @argument {Even} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator - (const Even &a, const Even &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 16 adds
  res[0]=a[0]-b[0];
  res[1]=a[1]-b[1];
  res[2]=a[2]-b[2];
  res[3]=a[3]-b[3];
  res[4]=a[4]-b[4];
  res[5]=a[5]-b[5];
  res[6]=a[6]-b[6];
  res[7]=a[7]-b[7];
  res[8]=a[8]-b[8];
  res[9]=a[9]-b[9];
  res[10]=a[10]-b[10];
  res[11]=a[11]-b[11];
  res[12]=a[12]-b[12];
  res[13]=a[13]-b[13];
  res[14]=a[14]-b[14];
  res[15]=a[15]-b[15];
  return res;
}

/*******************************************************************************
 * reverse_Even
 * @argument {Even} a
 * @returns {Even}
 ******************************************************************************/
inline Even operator ~ (const Even &a) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 10 adds
  res[0]=a[0];
  res[1]=-a[1];
  res[2]=-a[2];
  res[3]=-a[3];
  res[4]=-a[4];
  res[5]=-a[5];
  res[6]=-a[6];
  res[7]=-a[7];
  res[8]=-a[8];
  res[9]=-a[9];
  res[10]=-a[10];
  res[11]=a[11];
  res[12]=a[12];
  res[13]=a[13];
  res[14]=a[14];
  res[15]=a[15];
  return res;
}

/*******************************************************************************
 * gp_Even_float
 * @argument {Even} a
 * @argument {float} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Even &a, const float &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 16 muls / 0 adds
  res[0]=a[0]*b;
  res[1]=a[1]*b;
  res[2]=a[2]*b;
  res[3]=a[3]*b;
  res[4]=a[4]*b;
  res[5]=a[5]*b;
  res[6]=a[6]*b;
  res[7]=a[7]*b;
  res[8]=a[8]*b;
  res[9]=a[9]*b;
  res[10]=a[10]*b;
  res[11]=a[11]*b;
  res[12]=a[12]*b;
  res[13]=a[13]*b;
  res[14]=a[14]*b;
  res[15]=a[15]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Even
 * @argument {float} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const float &a, const Even &b) {
  Even res;
  // a
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 16 muls / 0 adds
  res[0]=a*b[0];
  res[1]=a*b[1];
  res[2]=a*b[2];
  res[3]=a*b[3];
  res[4]=a*b[4];
  res[5]=a*b[5];
  res[6]=a*b[6];
  res[7]=a*b[7];
  res[8]=a*b[8];
  res[9]=a*b[9];
  res[10]=a*b[10];
  res[11]=a*b[11];
  res[12]=a*b[12];
  res[13]=a*b[13];
  res[14]=a*b[14];
  res[15]=a*b[15];
  return res;
}

/*******************************************************************************
 * add_Even_float
 * @argument {Even} a
 * @argument {float} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator + (const Even &a, const float &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 1 adds
  res[0]=a[0]+b;
  res[1]=a[1];
  res[2]=a[2];
  res[3]=a[3];
  res[4]=a[4];
  res[5]=a[5];
  res[6]=a[6];
  res[7]=a[7];
  res[8]=a[8];
  res[9]=a[9];
  res[10]=a[10];
  res[11]=a[11];
  res[12]=a[12];
  res[13]=a[13];
  res[14]=a[14];
  res[15]=a[15];
  return res;
}

/*******************************************************************************
 * sub_Even_float
 * @argument {Even} a
 * @argument {float} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator - (const Even &a, const float &b) {
  Even res;
  // a0 + a1 e₁₂ + a2 e₁₃ + a3 e₁₄ + a4 e₁₅ + a5 e₂₃ + a6 e₂₄ + a7 e₂₅ + a8 e₃₄ + a9 e₃₅ + a10 e₄₅ + a11 e₁₂₃₄ + a12 e₁₂₃₅ + a13 e₁₂₄₅ + a14 e₁₃₄₅ + a15 e₂₃₄₅
  // b
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 1 adds
  res[0]=a[0]-b;
  res[1]=a[1];
  res[2]=a[2];
  res[3]=a[3];
  res[4]=a[4];
  res[5]=a[5];
  res[6]=a[6];
  res[7]=a[7];
  res[8]=a[8];
  res[9]=a[9];
  res[10]=a[10];
  res[11]=a[11];
  res[12]=a[12];
  res[13]=a[13];
  res[14]=a[14];
  res[15]=a[15];
  return res;
}

/*******************************************************************************
 * add_float_Even
 * @argument {float} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator + (const float &a, const Even &b) {
  Even res;
  // a
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 1 adds
  res[0]=a+b[0];
  res[1]=b[1];
  res[2]=b[2];
  res[3]=b[3];
  res[4]=b[4];
  res[5]=b[5];
  res[6]=b[6];
  res[7]=b[7];
  res[8]=b[8];
  res[9]=b[9];
  res[10]=b[10];
  res[11]=b[11];
  res[12]=b[12];
  res[13]=b[13];
  res[14]=b[14];
  res[15]=b[15];
  return res;
}

/*******************************************************************************
 * sub_float_Even
 * @argument {float} a
 * @argument {Even} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator - (const float &a, const Even &b) {
  Even res;
  // a
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 0 muls / 16 adds
  res[0]=a-b[0];
  res[1]=-b[1];
  res[2]=-b[2];
  res[3]=-b[3];
  res[4]=-b[4];
  res[5]=-b[5];
  res[6]=-b[6];
  res[7]=-b[7];
  res[8]=-b[8];
  res[9]=-b[9];
  res[10]=-b[10];
  res[11]=-b[11];
  res[12]=-b[12];
  res[13]=-b[13];
  res[14]=-b[14];
  res[15]=-b[15];
  return res;
}

/*******************************************************************************
 * ip_Odd_Una
 * @argument {Odd} a
 * @argument {Una} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Odd &a, const Una &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 32 muls / 21 adds
  res[0]=a[4]*b[4]-a[0]*b[0]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[7]*b[4]-a[5]*b[2];
  res[2]=a[5]*b[1]+a[9]*b[4];
  res[3]=a[10]*b[4]+a[6]*b[1]+a[8]*b[2];
  res[4]=a[7]*b[1]+a[9]*b[2];
  res[5]=a[12]*b[4]-a[5]*b[0];
  res[6]=a[11]*b[2]+a[13]*b[4]-a[6]*b[0];
  res[7]=a[12]*b[2]-a[7]*b[0];
  res[8]=a[14]*b[4]-a[11]*b[1]-a[8]*b[0];
  res[9]=-a[12]*b[1]-a[9]*b[0];
  res[10]=-a[10]*b[0]-a[13]*b[1]-a[14]*b[2];
  res[11]=a[15]*b[4];
  res[12]=0.0;
  res[13]=-a[15]*b[2];
  res[14]=a[15]*b[1];
  res[15]=-a[15]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Odd_Una
 * @argument {Odd} a
 * @argument {Una} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Odd &a, const Una &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 72 muls / 56 adds
  res[0]=a[4]*b[4]-a[0]*b[0]-a[1]*b[1]-a[2]*b[2];
  res[1]=a[0]*b[1]+a[7]*b[4]-a[1]*b[0]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[5]*b[1]+a[9]*b[4]-a[2]*b[0];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[6]*b[1]+a[8]*b[2]-a[3]*b[0];
  res[4]=a[0]*b[4]+a[7]*b[1]+a[9]*b[2]-a[4]*b[0];
  res[5]=a[12]*b[4]+a[1]*b[2]-a[2]*b[1]-a[5]*b[0];
  res[6]=a[11]*b[2]+a[13]*b[4]+a[1]*b[3]-a[3]*b[1]-a[6]*b[0];
  res[7]=a[12]*b[2]+a[1]*b[4]-a[4]*b[1]-a[7]*b[0];
  res[8]=a[14]*b[4]+a[2]*b[3]-a[11]*b[1]-a[3]*b[2]-a[8]*b[0];
  res[9]=a[2]*b[4]-a[12]*b[1]-a[4]*b[2]-a[9]*b[0];
  res[10]=a[3]*b[4]-a[10]*b[0]-a[13]*b[1]-a[14]*b[2]-a[4]*b[3];
  res[11]=a[15]*b[4]+a[5]*b[3]+a[8]*b[1]-a[11]*b[0]-a[6]*b[2];
  res[12]=a[5]*b[4]+a[9]*b[1]-a[12]*b[0]-a[7]*b[2];
  res[13]=a[10]*b[1]+a[6]*b[4]-a[13]*b[0]-a[15]*b[2]-a[7]*b[3];
  res[14]=a[10]*b[2]+a[15]*b[1]+a[8]*b[4]-a[14]*b[0]-a[9]*b[3];
  res[15]=a[11]*b[4]+a[13]*b[2]-a[12]*b[3]-a[14]*b[1]-a[15]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Odd_Bi
 * @argument {Odd} a
 * @argument {Bi} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Odd &a, const Bi &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 40 muls / 36 adds
  res[0]=a[1]*b[0]+a[2]*b[1]+a[7]*b[6]+a[9]*b[8]-a[4]*b[3]-a[5]*b[4];
  res[1]=a[12]*b[8]+a[2]*b[4]+a[5]*b[1]-a[0]*b[0]-a[4]*b[6]-a[7]*b[3];
  res[2]=-a[0]*b[1]-a[12]*b[6]-a[1]*b[4]-a[4]*b[8]-a[5]*b[0]-a[9]*b[3];
  res[3]=-a[0]*b[2]-a[10]*b[3]-a[11]*b[4]-a[13]*b[6]-a[14]*b[8]-a[1]*b[5]-a[2]*b[7]-a[4]*b[9]-a[6]*b[0]-a[8]*b[1];
  res[4]=-a[0]*b[3]-a[12]*b[4]-a[1]*b[6]-a[2]*b[8]-a[7]*b[0]-a[9]*b[1];
  res[5]=0.0;
  res[6]=-a[15]*b[8];
  res[7]=0.0;
  res[8]=a[15]*b[6];
  res[9]=0.0;
  res[10]=-a[15]*b[4];
  res[11]=-a[15]*b[3];
  res[12]=0.0;
  res[13]=a[15]*b[1];
  res[14]=-a[15]*b[0];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Odd_Bi
 * @argument {Odd} a
 * @argument {Bi} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Odd &a, const Bi &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 128 muls / 115 adds
  res[0]=a[1]*b[0]+a[2]*b[1]+a[7]*b[6]+a[9]*b[8]-a[4]*b[3]-a[5]*b[4];
  res[1]=a[12]*b[8]+a[2]*b[4]+a[5]*b[1]-a[0]*b[0]-a[4]*b[6]-a[7]*b[3];
  res[2]=-a[0]*b[1]-a[12]*b[6]-a[1]*b[4]-a[4]*b[8]-a[5]*b[0]-a[9]*b[3];
  res[3]=-a[0]*b[2]-a[10]*b[3]-a[11]*b[4]-a[13]*b[6]-a[14]*b[8]-a[1]*b[5]-a[2]*b[7]-a[4]*b[9]-a[6]*b[0]-a[8]*b[1];
  res[4]=-a[0]*b[3]-a[12]*b[4]-a[1]*b[6]-a[2]*b[8]-a[7]*b[0]-a[9]*b[1];
  res[5]=a[0]*b[4]+a[2]*b[0]+a[9]*b[6]-a[12]*b[3]-a[1]*b[1]-a[7]*b[8];
  res[6]=a[0]*b[5]+a[10]*b[6]+a[3]*b[0]+a[8]*b[4]-a[11]*b[1]-a[13]*b[3]-a[15]*b[8]-a[1]*b[2]-a[5]*b[7]-a[7]*b[9];
  res[7]=a[0]*b[6]+a[4]*b[0]+a[9]*b[4]-a[12]*b[1]-a[1]*b[3]-a[5]*b[8];
  res[8]=a[0]*b[7]+a[10]*b[8]+a[11]*b[0]+a[15]*b[6]+a[3]*b[1]+a[5]*b[5]-a[14]*b[3]-a[2]*b[2]-a[6]*b[4]-a[9]*b[9];
  res[9]=a[0]*b[8]+a[12]*b[0]+a[4]*b[1]+a[5]*b[6]-a[2]*b[3]-a[7]*b[4];
  res[10]=a[0]*b[9]+a[13]*b[0]+a[14]*b[1]+a[4]*b[2]+a[6]*b[6]+a[8]*b[8]-a[15]*b[4]-a[3]*b[3]-a[7]*b[5]-a[9]*b[7];
  res[11]=a[13]*b[8]+a[1]*b[7]+a[3]*b[4]+a[6]*b[1]-a[12]*b[9]-a[14]*b[6]-a[15]*b[3]-a[2]*b[5]-a[5]*b[2]-a[8]*b[0];
  res[12]=a[1]*b[8]+a[4]*b[4]+a[7]*b[1]-a[2]*b[6]-a[5]*b[3]-a[9]*b[0];
  res[13]=a[11]*b[8]+a[14]*b[4]+a[15]*b[1]+a[1]*b[9]+a[4]*b[5]+a[7]*b[2]-a[10]*b[0]-a[12]*b[7]-a[3]*b[6]-a[6]*b[3];
  res[14]=a[12]*b[5]+a[2]*b[9]+a[4]*b[7]+a[9]*b[2]-a[10]*b[1]-a[11]*b[6]-a[13]*b[4]-a[15]*b[0]-a[3]*b[8]-a[8]*b[3];
  res[15]=a[10]*b[4]+a[12]*b[2]+a[14]*b[0]+a[5]*b[9]+a[7]*b[7]+a[8]*b[6]-a[11]*b[3]-a[13]*b[1]-a[6]*b[8]-a[9]*b[5];
  return res;
}

/*******************************************************************************
 * ip_Odd_Tri
 * @argument {Odd} a
 * @argument {Tri} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Odd &a, const Tri &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 32 muls / 22 adds
  res[0]=a[5]*b[0]-a[12]*b[7]-a[7]*b[2]-a[9]*b[4];
  res[1]=a[4]*b[2]-a[2]*b[0];
  res[2]=a[1]*b[0]+a[4]*b[4];
  res[3]=a[1]*b[1]+a[2]*b[3]+a[4]*b[5]-a[15]*b[7];
  res[4]=a[1]*b[2]+a[2]*b[4];
  res[5]=a[4]*b[7]-a[0]*b[0];
  res[6]=a[15]*b[4]+a[2]*b[6]+a[4]*b[8]-a[0]*b[1];
  res[7]=a[2]*b[7]-a[0]*b[2];
  res[8]=a[4]*b[9]-a[0]*b[3]-a[15]*b[2]-a[1]*b[6];
  res[9]=-a[0]*b[4]-a[1]*b[7];
  res[10]=a[15]*b[0]-a[0]*b[5]-a[1]*b[8]-a[2]*b[9];
  res[11]=0.0;
  res[12]=0.0;
  res[13]=0.0;
  res[14]=0.0;
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Odd_Tri
 * @argument {Odd} a
 * @argument {Tri} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Odd &a, const Tri &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 112 muls / 96 adds
  res[0]=a[5]*b[0]-a[12]*b[7]-a[7]*b[2]-a[9]*b[4];
  res[1]=a[4]*b[2]+a[9]*b[7]-a[12]*b[4]-a[2]*b[0];
  res[2]=a[12]*b[2]+a[1]*b[0]+a[4]*b[4]-a[7]*b[7];
  res[3]=a[11]*b[0]+a[13]*b[2]+a[14]*b[4]+a[1]*b[1]+a[2]*b[3]+a[4]*b[5]-a[15]*b[7]-a[5]*b[6]-a[7]*b[8]-a[9]*b[9];
  res[4]=a[12]*b[0]+a[1]*b[2]+a[2]*b[4]-a[5]*b[7];
  res[5]=a[4]*b[7]+a[7]*b[4]-a[0]*b[0]-a[9]*b[2];
  res[6]=a[14]*b[7]+a[15]*b[4]+a[2]*b[6]+a[4]*b[8]+a[5]*b[3]+a[7]*b[5]-a[0]*b[1]-a[10]*b[2]-a[12]*b[9]-a[8]*b[0];
  res[7]=a[2]*b[7]+a[5]*b[4]-a[0]*b[2]-a[9]*b[0];
  res[8]=a[12]*b[8]+a[4]*b[9]+a[6]*b[0]+a[9]*b[5]-a[0]*b[3]-a[10]*b[4]-a[13]*b[7]-a[15]*b[2]-a[1]*b[6]-a[5]*b[1];
  res[9]=a[7]*b[0]-a[0]*b[4]-a[1]*b[7]-a[5]*b[2];
  res[10]=a[12]*b[6]+a[15]*b[0]+a[7]*b[1]+a[9]*b[3]-a[0]*b[5]-a[11]*b[7]-a[1]*b[8]-a[2]*b[9]-a[6]*b[2]-a[8]*b[4];
  res[11]=a[0]*b[6]+a[10]*b[7]+a[12]*b[5]+a[14]*b[2]+a[2]*b[1]+a[7]*b[9]-a[13]*b[4]-a[1]*b[3]-a[3]*b[0]-a[9]*b[8];
  res[12]=a[0]*b[7]+a[2]*b[2]-a[1]*b[4]-a[4]*b[0];
  res[13]=a[0]*b[8]+a[12]*b[3]+a[3]*b[2]+a[8]*b[7]-a[11]*b[4]-a[14]*b[0]-a[1]*b[5]-a[4]*b[1]-a[5]*b[9]-a[9]*b[6];
  res[14]=a[0]*b[9]+a[11]*b[2]+a[13]*b[0]+a[3]*b[4]+a[5]*b[8]+a[7]*b[6]-a[12]*b[1]-a[2]*b[5]-a[4]*b[3]-a[6]*b[7];
  res[15]=a[1]*b[9]+a[3]*b[7]+a[6]*b[4]+a[9]*b[1]-a[10]*b[0]-a[2]*b[8]-a[4]*b[6]-a[5]*b[5]-a[7]*b[3]-a[8]*b[2];
  return res;
}

/*******************************************************************************
 * ip_Odd_Quad
 * @argument {Odd} a
 * @argument {Quad} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Odd &a, const Quad &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 25 muls / 17 adds
  res[0]=a[12]*b[1];
  res[1]=-a[9]*b[1];
  res[2]=a[7]*b[1];
  res[3]=a[12]*b[4]+a[15]*b[1]+a[5]*b[0]+a[7]*b[2]+a[9]*b[3];
  res[4]=a[5]*b[1];
  res[5]=-a[4]*b[1];
  res[6]=-a[2]*b[0]-a[4]*b[2];
  res[7]=-a[2]*b[1];
  res[8]=a[1]*b[0]-a[4]*b[3];
  res[9]=a[1]*b[1];
  res[10]=a[1]*b[2]+a[2]*b[3];
  res[11]=-a[0]*b[0]-a[4]*b[4];
  res[12]=-a[0]*b[1];
  res[13]=a[2]*b[4]-a[0]*b[2];
  res[14]=-a[0]*b[3]-a[1]*b[4];
  res[15]=0.0;
  return res;
}

/*******************************************************************************
 * gp_Odd_Quad
 * @argument {Odd} a
 * @argument {Quad} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Odd &a, const Quad &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 48 muls / 36 adds
  res[0]=a[12]*b[1];
  res[1]=-a[9]*b[1];
  res[2]=a[7]*b[1];
  res[3]=a[12]*b[4]+a[15]*b[1]+a[5]*b[0]+a[7]*b[2]+a[9]*b[3];
  res[4]=a[5]*b[1];
  res[5]=-a[4]*b[1];
  res[6]=a[12]*b[3]-a[14]*b[1]-a[2]*b[0]-a[4]*b[2]-a[9]*b[4];
  res[7]=-a[2]*b[1];
  res[8]=a[13]*b[1]+a[1]*b[0]+a[7]*b[4]-a[12]*b[2]-a[4]*b[3];
  res[9]=a[1]*b[1];
  res[10]=a[11]*b[1]+a[1]*b[2]+a[2]*b[3]-a[12]*b[0]-a[5]*b[4];
  res[11]=a[9]*b[2]-a[0]*b[0]-a[10]*b[1]-a[4]*b[4]-a[7]*b[3];
  res[12]=-a[0]*b[1];
  res[13]=a[2]*b[4]+a[5]*b[3]+a[9]*b[0]-a[0]*b[2]-a[8]*b[1];
  res[14]=a[6]*b[1]-a[0]*b[3]-a[1]*b[4]-a[5]*b[2]-a[7]*b[0];
  res[15]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * ip_Odd_Pent
 * @argument {Odd} a
 * @argument {Pent} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Odd &a, const Pent &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=-a[12]*b[0];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=a[9]*b[0];
  res[7]=0.0;
  res[8]=-a[7]*b[0];
  res[9]=0.0;
  res[10]=a[5]*b[0];
  res[11]=a[4]*b[0];
  res[12]=0.0;
  res[13]=-a[2]*b[0];
  res[14]=a[1]*b[0];
  res[15]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Odd_Pent
 * @argument {Odd} a
 * @argument {Pent} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Odd &a, const Pent &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 8 muls / 4 adds
  res[0]=0.0;
  res[1]=0.0;
  res[2]=0.0;
  res[3]=-a[12]*b[0];
  res[4]=0.0;
  res[5]=0.0;
  res[6]=a[9]*b[0];
  res[7]=0.0;
  res[8]=-a[7]*b[0];
  res[9]=0.0;
  res[10]=a[5]*b[0];
  res[11]=a[4]*b[0];
  res[12]=0.0;
  res[13]=-a[2]*b[0];
  res[14]=a[1]*b[0];
  res[15]=-a[0]*b[0];
  return res;
}

/*******************************************************************************
 * ip_Odd_Even
 * @argument {Odd} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator | (const Odd &a, const Even &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 81 muls / 65 adds
  res[0]=a[0]*b[0]+a[12]*b[12]+a[1]*b[1]+a[2]*b[2]+a[7]*b[7]+a[9]*b[9]-a[4]*b[4]-a[5]*b[5];
  res[1]=a[12]*b[9]+a[1]*b[0]+a[2]*b[5]+a[5]*b[2]-a[0]*b[1]-a[4]*b[7]-a[7]*b[4]-a[9]*b[12];
  res[2]=a[2]*b[0]+a[7]*b[12]-a[0]*b[2]-a[12]*b[7]-a[1]*b[5]-a[4]*b[9]-a[5]*b[1]-a[9]*b[4];
  res[3]=a[12]*b[15]+a[15]*b[12]+a[3]*b[0]+a[5]*b[11]+a[7]*b[13]+a[9]*b[14]-a[0]*b[3]-a[10]*b[4]-a[11]*b[5]-a[13]*b[7]-a[14]*b[9]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10]-a[6]*b[1]-a[8]*b[2];
  res[4]=a[4]*b[0]+a[5]*b[12]-a[0]*b[4]-a[12]*b[5]-a[1]*b[7]-a[2]*b[9]-a[7]*b[1]-a[9]*b[2];
  res[5]=a[5]*b[0]-a[4]*b[12];
  res[6]=a[6]*b[0]-a[15]*b[9]-a[2]*b[11]-a[4]*b[13];
  res[7]=a[7]*b[0]-a[2]*b[12];
  res[8]=a[15]*b[7]+a[1]*b[11]+a[8]*b[0]-a[4]*b[14];
  res[9]=a[1]*b[12]+a[9]*b[0];
  res[10]=a[10]*b[0]+a[1]*b[13]+a[2]*b[14]-a[15]*b[5];
  res[11]=a[11]*b[0]-a[0]*b[11]-a[15]*b[4]-a[4]*b[15];
  res[12]=a[12]*b[0]-a[0]*b[12];
  res[13]=a[13]*b[0]+a[15]*b[2]+a[2]*b[15]-a[0]*b[13];
  res[14]=a[14]*b[0]-a[0]*b[14]-a[15]*b[1]-a[1]*b[15];
  res[15]=a[15]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Odd_Even
 * @argument {Odd} a
 * @argument {Even} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Odd &a, const Even &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 + b1 e₁₂ + b2 e₁₃ + b3 e₁₄ + b4 e₁₅ + b5 e₂₃ + b6 e₂₄ + b7 e₂₅ + b8 e₃₄ + b9 e₃₅ + b10 e₄₅ + b11 e₁₂₃₄ + b12 e₁₂₃₅ + b13 e₁₂₄₅ + b14 e₁₃₄₅ + b15 e₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 192 muls / 176 adds
  res[0]=a[0]*b[0]+a[12]*b[12]+a[1]*b[1]+a[2]*b[2]+a[7]*b[7]+a[9]*b[9]-a[4]*b[4]-a[5]*b[5];
  res[1]=a[12]*b[9]+a[1]*b[0]+a[2]*b[5]+a[5]*b[2]-a[0]*b[1]-a[4]*b[7]-a[7]*b[4]-a[9]*b[12];
  res[2]=a[2]*b[0]+a[7]*b[12]-a[0]*b[2]-a[12]*b[7]-a[1]*b[5]-a[4]*b[9]-a[5]*b[1]-a[9]*b[4];
  res[3]=a[12]*b[15]+a[15]*b[12]+a[3]*b[0]+a[5]*b[11]+a[7]*b[13]+a[9]*b[14]-a[0]*b[3]-a[10]*b[4]-a[11]*b[5]-a[13]*b[7]-a[14]*b[9]-a[1]*b[6]-a[2]*b[8]-a[4]*b[10]-a[6]*b[1]-a[8]*b[2];
  res[4]=a[4]*b[0]+a[5]*b[12]-a[0]*b[4]-a[12]*b[5]-a[1]*b[7]-a[2]*b[9]-a[7]*b[1]-a[9]*b[2];
  res[5]=a[0]*b[5]+a[2]*b[1]+a[5]*b[0]+a[9]*b[7]-a[12]*b[4]-a[1]*b[2]-a[4]*b[12]-a[7]*b[9];
  res[6]=a[0]*b[6]+a[10]*b[7]+a[12]*b[14]+a[3]*b[1]+a[6]*b[0]+a[8]*b[5]-a[11]*b[2]-a[13]*b[4]-a[14]*b[12]-a[15]*b[9]-a[1]*b[3]-a[2]*b[11]-a[4]*b[13]-a[5]*b[8]-a[7]*b[10]-a[9]*b[15];
  res[7]=a[0]*b[7]+a[4]*b[1]+a[7]*b[0]+a[9]*b[5]-a[12]*b[2]-a[1]*b[4]-a[2]*b[12]-a[5]*b[9];
  res[8]=a[0]*b[8]+a[10]*b[9]+a[11]*b[1]+a[13]*b[12]+a[15]*b[7]+a[1]*b[11]+a[3]*b[2]+a[5]*b[6]+a[7]*b[15]+a[8]*b[0]-a[12]*b[13]-a[14]*b[4]-a[2]*b[3]-a[4]*b[14]-a[6]*b[5]-a[9]*b[10];
  res[9]=a[0]*b[9]+a[12]*b[1]+a[1]*b[12]+a[4]*b[2]+a[5]*b[7]+a[9]*b[0]-a[2]*b[4]-a[7]*b[5];
  res[10]=a[0]*b[10]+a[10]*b[0]+a[11]*b[12]+a[13]*b[1]+a[14]*b[2]+a[1]*b[13]+a[2]*b[14]+a[4]*b[3]+a[6]*b[7]+a[8]*b[9]-a[12]*b[11]-a[15]*b[5]-a[3]*b[4]-a[5]*b[15]-a[7]*b[6]-a[9]*b[8];
  res[11]=a[11]*b[0]+a[13]*b[9]+a[1]*b[8]+a[3]*b[5]+a[6]*b[2]+a[9]*b[13]-a[0]*b[11]-a[10]*b[12]-a[12]*b[10]-a[14]*b[7]-a[15]*b[4]-a[2]*b[6]-a[4]*b[15]-a[5]*b[3]-a[7]*b[14]-a[8]*b[1];
  res[12]=a[12]*b[0]+a[1]*b[9]+a[4]*b[5]+a[7]*b[2]-a[0]*b[12]-a[2]*b[7]-a[5]*b[4]-a[9]*b[1];
  res[13]=a[11]*b[9]+a[13]*b[0]+a[14]*b[5]+a[15]*b[2]+a[1]*b[10]+a[2]*b[15]+a[4]*b[6]+a[5]*b[14]+a[7]*b[3]+a[9]*b[11]-a[0]*b[13]-a[10]*b[1]-a[12]*b[8]-a[3]*b[7]-a[6]*b[4]-a[8]*b[12];
  res[14]=a[12]*b[6]+a[14]*b[0]+a[2]*b[10]+a[4]*b[8]+a[6]*b[12]+a[9]*b[3]-a[0]*b[14]-a[10]*b[2]-a[11]*b[7]-a[13]*b[5]-a[15]*b[1]-a[1]*b[15]-a[3]*b[9]-a[5]*b[13]-a[7]*b[11]-a[8]*b[4];
  res[15]=a[0]*b[15]+a[10]*b[5]+a[12]*b[3]+a[14]*b[1]+a[15]*b[0]+a[2]*b[13]+a[4]*b[11]+a[5]*b[10]+a[7]*b[8]+a[8]*b[7]-a[11]*b[4]-a[13]*b[2]-a[1]*b[14]-a[3]*b[12]-a[6]*b[9]-a[9]*b[6];
  return res;
}

/*******************************************************************************
 * ip_Odd_Odd
 * @argument {Odd} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator | (const Odd &a, const Odd &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 72 muls / 60 adds
  res[0]=a[4]*b[4]+a[5]*b[5]-a[0]*b[0]-a[12]*b[12]-a[1]*b[1]-a[2]*b[2]-a[7]*b[7]-a[9]*b[9];
  res[1]=a[4]*b[7]+a[7]*b[4]-a[2]*b[5]-a[5]*b[2];
  res[2]=a[1]*b[5]+a[4]*b[9]+a[5]*b[1]+a[9]*b[4];
  res[3]=a[10]*b[4]+a[1]*b[6]+a[2]*b[8]+a[4]*b[10]+a[6]*b[1]+a[8]*b[2]-a[12]*b[15]-a[15]*b[12];
  res[4]=a[1]*b[7]+a[2]*b[9]+a[7]*b[1]+a[9]*b[2];
  res[5]=a[12]*b[4]+a[4]*b[12]-a[0]*b[5]-a[5]*b[0];
  res[6]=a[11]*b[2]+a[13]*b[4]+a[15]*b[9]+a[2]*b[11]+a[4]*b[13]+a[9]*b[15]-a[0]*b[6]-a[6]*b[0];
  res[7]=a[12]*b[2]+a[2]*b[12]-a[0]*b[7]-a[7]*b[0];
  res[8]=a[14]*b[4]+a[4]*b[14]-a[0]*b[8]-a[11]*b[1]-a[15]*b[7]-a[1]*b[11]-a[7]*b[15]-a[8]*b[0];
  res[9]=-a[0]*b[9]-a[12]*b[1]-a[1]*b[12]-a[9]*b[0];
  res[10]=a[15]*b[5]+a[5]*b[15]-a[0]*b[10]-a[10]*b[0]-a[13]*b[1]-a[14]*b[2]-a[1]*b[13]-a[2]*b[14];
  res[11]=a[15]*b[4]+a[4]*b[15];
  res[12]=0.0;
  res[13]=-a[15]*b[2]-a[2]*b[15];
  res[14]=a[15]*b[1]+a[1]*b[15];
  res[15]=-a[0]*b[15]-a[15]*b[0];
  return res;
}

/*******************************************************************************
 * gp_Odd_Odd
 * @argument {Odd} a
 * @argument {Odd} b
 * @returns {Even}
 ******************************************************************************/
inline Even operator * (const Odd &a, const Odd &b) {
  Even res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 + r1 e₁₂ + r2 e₁₃ + r3 e₁₄ + r4 e₁₅ + r5 e₂₃ + r6 e₂₄ + r7 e₂₅ + r8 e₃₄ + r9 e₃₅ + r10 e₄₅ + r11 e₁₂₃₄ + r12 e₁₂₃₅ + r13 e₁₂₄₅ + r14 e₁₃₄₅ + r15 e₂₃₄₅
  // 192 muls / 176 adds
  res[0]=a[4]*b[4]+a[5]*b[5]-a[0]*b[0]-a[12]*b[12]-a[1]*b[1]-a[2]*b[2]-a[7]*b[7]-a[9]*b[9];
  res[1]=a[0]*b[1]+a[4]*b[7]+a[7]*b[4]+a[9]*b[12]-a[12]*b[9]-a[1]*b[0]-a[2]*b[5]-a[5]*b[2];
  res[2]=a[0]*b[2]+a[12]*b[7]+a[1]*b[5]+a[4]*b[9]+a[5]*b[1]+a[9]*b[4]-a[2]*b[0]-a[7]*b[12];
  res[3]=a[0]*b[3]+a[10]*b[4]+a[11]*b[5]+a[13]*b[7]+a[14]*b[9]+a[1]*b[6]+a[2]*b[8]+a[4]*b[10]+a[6]*b[1]+a[8]*b[2]-a[12]*b[15]-a[15]*b[12]-a[3]*b[0]-a[5]*b[11]-a[7]*b[13]-a[9]*b[14];
  res[4]=a[0]*b[4]+a[12]*b[5]+a[1]*b[7]+a[2]*b[9]+a[7]*b[1]+a[9]*b[2]-a[4]*b[0]-a[5]*b[12];
  res[5]=a[12]*b[4]+a[1]*b[2]+a[4]*b[12]+a[7]*b[9]-a[0]*b[5]-a[2]*b[1]-a[5]*b[0]-a[9]*b[7];
  res[6]=a[11]*b[2]+a[13]*b[4]+a[14]*b[12]+a[15]*b[9]+a[1]*b[3]+a[2]*b[11]+a[4]*b[13]+a[5]*b[8]+a[7]*b[10]+a[9]*b[15]-a[0]*b[6]-a[10]*b[7]-a[12]*b[14]-a[3]*b[1]-a[6]*b[0]-a[8]*b[5];
  res[7]=a[12]*b[2]+a[1]*b[4]+a[2]*b[12]+a[5]*b[9]-a[0]*b[7]-a[4]*b[1]-a[7]*b[0]-a[9]*b[5];
  res[8]=a[12]*b[13]+a[14]*b[4]+a[2]*b[3]+a[4]*b[14]+a[6]*b[5]+a[9]*b[10]-a[0]*b[8]-a[10]*b[9]-a[11]*b[1]-a[13]*b[12]-a[15]*b[7]-a[1]*b[11]-a[3]*b[2]-a[5]*b[6]-a[7]*b[15]-a[8]*b[0];
  res[9]=a[2]*b[4]+a[7]*b[5]-a[0]*b[9]-a[12]*b[1]-a[1]*b[12]-a[4]*b[2]-a[5]*b[7]-a[9]*b[0];
  res[10]=a[12]*b[11]+a[15]*b[5]+a[3]*b[4]+a[5]*b[15]+a[7]*b[6]+a[9]*b[8]-a[0]*b[10]-a[10]*b[0]-a[11]*b[12]-a[13]*b[1]-a[14]*b[2]-a[1]*b[13]-a[2]*b[14]-a[4]*b[3]-a[6]*b[7]-a[8]*b[9];
  res[11]=a[0]*b[11]+a[10]*b[12]+a[12]*b[10]+a[14]*b[7]+a[15]*b[4]+a[2]*b[6]+a[4]*b[15]+a[5]*b[3]+a[7]*b[14]+a[8]*b[1]-a[11]*b[0]-a[13]*b[9]-a[1]*b[8]-a[3]*b[5]-a[6]*b[2]-a[9]*b[13];
  res[12]=a[0]*b[12]+a[2]*b[7]+a[5]*b[4]+a[9]*b[1]-a[12]*b[0]-a[1]*b[9]-a[4]*b[5]-a[7]*b[2];
  res[13]=a[0]*b[13]+a[10]*b[1]+a[12]*b[8]+a[3]*b[7]+a[6]*b[4]+a[8]*b[12]-a[11]*b[9]-a[13]*b[0]-a[14]*b[5]-a[15]*b[2]-a[1]*b[10]-a[2]*b[15]-a[4]*b[6]-a[5]*b[14]-a[7]*b[3]-a[9]*b[11];
  res[14]=a[0]*b[14]+a[10]*b[2]+a[11]*b[7]+a[13]*b[5]+a[15]*b[1]+a[1]*b[15]+a[3]*b[9]+a[5]*b[13]+a[7]*b[11]+a[8]*b[4]-a[12]*b[6]-a[14]*b[0]-a[2]*b[10]-a[4]*b[8]-a[6]*b[12]-a[9]*b[3];
  res[15]=a[11]*b[4]+a[13]*b[2]+a[1]*b[14]+a[3]*b[12]+a[6]*b[9]+a[9]*b[6]-a[0]*b[15]-a[10]*b[5]-a[12]*b[3]-a[14]*b[1]-a[15]*b[0]-a[2]*b[13]-a[4]*b[11]-a[5]*b[10]-a[7]*b[8]-a[8]*b[7];
  return res;
}

/*******************************************************************************
 * add_Odd_Odd
 * @argument {Odd} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator + (const Odd &a, const Odd &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 0 muls / 16 adds
  res[0]=a[0]+b[0];
  res[1]=a[1]+b[1];
  res[2]=a[2]+b[2];
  res[3]=a[3]+b[3];
  res[4]=a[4]+b[4];
  res[5]=a[5]+b[5];
  res[6]=a[6]+b[6];
  res[7]=a[7]+b[7];
  res[8]=a[8]+b[8];
  res[9]=a[9]+b[9];
  res[10]=a[10]+b[10];
  res[11]=a[11]+b[11];
  res[12]=a[12]+b[12];
  res[13]=a[13]+b[13];
  res[14]=a[14]+b[14];
  res[15]=a[15]+b[15];
  return res;
}

/*******************************************************************************
 * sub_Odd_Odd
 * @argument {Odd} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator - (const Odd &a, const Odd &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 0 muls / 16 adds
  res[0]=a[0]-b[0];
  res[1]=a[1]-b[1];
  res[2]=a[2]-b[2];
  res[3]=a[3]-b[3];
  res[4]=a[4]-b[4];
  res[5]=a[5]-b[5];
  res[6]=a[6]-b[6];
  res[7]=a[7]-b[7];
  res[8]=a[8]-b[8];
  res[9]=a[9]-b[9];
  res[10]=a[10]-b[10];
  res[11]=a[11]-b[11];
  res[12]=a[12]-b[12];
  res[13]=a[13]-b[13];
  res[14]=a[14]-b[14];
  res[15]=a[15]-b[15];
  return res;
}

/*******************************************************************************
 * reverse_Odd
 * @argument {Odd} a
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator ~ (const Odd &a) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 0 muls / 10 adds
  res[0]=a[0];
  res[1]=a[1];
  res[2]=a[2];
  res[3]=a[3];
  res[4]=a[4];
  res[5]=-a[5];
  res[6]=-a[6];
  res[7]=-a[7];
  res[8]=-a[8];
  res[9]=-a[9];
  res[10]=-a[10];
  res[11]=-a[11];
  res[12]=-a[12];
  res[13]=-a[13];
  res[14]=-a[14];
  res[15]=a[15];
  return res;
}

/*******************************************************************************
 * gp_Odd_float
 * @argument {Odd} a
 * @argument {float} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const Odd &a, const float &b) {
  Odd res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅ + a5 e₁₂₃ + a6 e₁₂₄ + a7 e₁₂₅ + a8 e₁₃₄ + a9 e₁₃₅ + a10 e₁₄₅ + a11 e₂₃₄ + a12 e₂₃₅ + a13 e₂₄₅ + a14 e₃₄₅ + a15 e₁₂₃₄₅
  // b
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 16 muls / 0 adds
  res[0]=a[0]*b;
  res[1]=a[1]*b;
  res[2]=a[2]*b;
  res[3]=a[3]*b;
  res[4]=a[4]*b;
  res[5]=a[5]*b;
  res[6]=a[6]*b;
  res[7]=a[7]*b;
  res[8]=a[8]*b;
  res[9]=a[9]*b;
  res[10]=a[10]*b;
  res[11]=a[11]*b;
  res[12]=a[12]*b;
  res[13]=a[13]*b;
  res[14]=a[14]*b;
  res[15]=a[15]*b;
  return res;
}

/*******************************************************************************
 * gp_float_Odd
 * @argument {float} a
 * @argument {Odd} b
 * @returns {Odd}
 ******************************************************************************/
inline Odd operator * (const float &a, const Odd &b) {
  Odd res;
  // a
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅ + b5 e₁₂₃ + b6 e₁₂₄ + b7 e₁₂₅ + b8 e₁₃₄ + b9 e₁₃₅ + b10 e₁₄₅ + b11 e₂₃₄ + b12 e₂₃₅ + b13 e₂₄₅ + b14 e₃₄₅ + b15 e₁₂₃₄₅
  // -> r0 e₁ + r1 e₂ + r2 e₃ + r3 e₄ + r4 e₅ + r5 e₁₂₃ + r6 e₁₂₄ + r7 e₁₂₅ + r8 e₁₃₄ + r9 e₁₃₅ + r10 e₁₄₅ + r11 e₂₃₄ + r12 e₂₃₅ + r13 e₂₄₅ + r14 e₃₄₅ + r15 e₁₂₃₄₅
  // 16 muls / 0 adds
  res[0]=a*b[0];
  res[1]=a*b[1];
  res[2]=a*b[2];
  res[3]=a*b[3];
  res[4]=a*b[4];
  res[5]=a*b[5];
  res[6]=a*b[6];
  res[7]=a*b[7];
  res[8]=a*b[8];
  res[9]=a*b[9];
  res[10]=a*b[10];
  res[11]=a*b[11];
  res[12]=a*b[12];
  res[13]=a*b[13];
  res[14]=a*b[14];
  res[15]=a*b[15];
  return res;
}

/*******************************************************************************
 * op_Una_Una
 * @argument {Una} a
 * @argument {Una} b
 * @returns {Bi}
 ******************************************************************************/
inline Bi operator ^ (const Una &a, const Una &b) {
  Bi res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂ + r1 e₁₃ + r2 e₁₄ + r3 e₁₅ + r4 e₂₃ + r5 e₂₄ + r6 e₂₅ + r7 e₃₄ + r8 e₃₅ + r9 e₄₅
  // 20 muls / 10 adds
  res[0]=a[0]*b[1]-a[1]*b[0];
  res[1]=a[0]*b[2]-a[2]*b[0];
  res[2]=a[0]*b[3]-a[3]*b[0];
  res[3]=a[0]*b[4]-a[4]*b[0];
  res[4]=a[1]*b[2]-a[2]*b[1];
  res[5]=a[1]*b[3]-a[3]*b[1];
  res[6]=a[1]*b[4]-a[4]*b[1];
  res[7]=a[2]*b[3]-a[3]*b[2];
  res[8]=a[2]*b[4]-a[4]*b[2];
  res[9]=a[3]*b[4]-a[4]*b[3];
  return res;
}

/*******************************************************************************
 * op_Una_Bi
 * @argument {Una} a
 * @argument {Bi} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator ^ (const Una &a, const Bi &b) {
  Tri res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 30 muls / 20 adds
  res[0]=a[0]*b[4]+a[2]*b[0]-a[1]*b[1];
  res[1]=a[0]*b[5]+a[3]*b[0]-a[1]*b[2];
  res[2]=a[0]*b[6]+a[4]*b[0]-a[1]*b[3];
  res[3]=a[0]*b[7]+a[3]*b[1]-a[2]*b[2];
  res[4]=a[0]*b[8]+a[4]*b[1]-a[2]*b[3];
  res[5]=a[0]*b[9]+a[4]*b[2]-a[3]*b[3];
  res[6]=a[1]*b[7]+a[3]*b[4]-a[2]*b[5];
  res[7]=a[1]*b[8]+a[4]*b[4]-a[2]*b[6];
  res[8]=a[1]*b[9]+a[4]*b[5]-a[3]*b[6];
  res[9]=a[2]*b[9]+a[4]*b[7]-a[3]*b[8];
  return res;
}

/*******************************************************************************
 * op_Una_Tri
 * @argument {Una} a
 * @argument {Tri} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator ^ (const Una &a, const Tri &b) {
  Quad res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 20 muls / 15 adds
  res[0]=a[0]*b[6]+a[2]*b[1]-a[1]*b[3]-a[3]*b[0];
  res[1]=a[0]*b[7]+a[2]*b[2]-a[1]*b[4]-a[4]*b[0];
  res[2]=a[0]*b[8]+a[3]*b[2]-a[1]*b[5]-a[4]*b[1];
  res[3]=a[0]*b[9]+a[3]*b[4]-a[2]*b[5]-a[4]*b[3];
  res[4]=a[1]*b[9]+a[3]*b[7]-a[2]*b[8]-a[4]*b[6];
  return res;
}

/*******************************************************************************
 * op_Una_Quad
 * @argument {Una} a
 * @argument {Quad} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator ^ (const Una &a, const Quad &b) {
  Pent res;
  // a0 e₁ + a1 e₂ + a2 e₃ + a3 e₄ + a4 e₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r0 e₁₂₃₄₅
  // 5 muls / 4 adds
  res[0]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * op_Bi_Una
 * @argument {Bi} a
 * @argument {Una} b
 * @returns {Tri}
 ******************************************************************************/
inline Tri operator ^ (const Bi &a, const Una &b) {
  Tri res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂₃ + r1 e₁₂₄ + r2 e₁₂₅ + r3 e₁₃₄ + r4 e₁₃₅ + r5 e₁₄₅ + r6 e₂₃₄ + r7 e₂₃₅ + r8 e₂₄₅ + r9 e₃₄₅
  // 30 muls / 20 adds
  res[0]=a[0]*b[2]+a[4]*b[0]-a[1]*b[1];
  res[1]=a[0]*b[3]+a[5]*b[0]-a[2]*b[1];
  res[2]=a[0]*b[4]+a[6]*b[0]-a[3]*b[1];
  res[3]=a[1]*b[3]+a[7]*b[0]-a[2]*b[2];
  res[4]=a[1]*b[4]+a[8]*b[0]-a[3]*b[2];
  res[5]=a[2]*b[4]+a[9]*b[0]-a[3]*b[3];
  res[6]=a[4]*b[3]+a[7]*b[1]-a[5]*b[2];
  res[7]=a[4]*b[4]+a[8]*b[1]-a[6]*b[2];
  res[8]=a[5]*b[4]+a[9]*b[1]-a[6]*b[3];
  res[9]=a[7]*b[4]+a[9]*b[2]-a[8]*b[3];
  return res;
}

/*******************************************************************************
 * op_Bi_Bi
 * @argument {Bi} a
 * @argument {Bi} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator ^ (const Bi &a, const Bi &b) {
  Quad res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 30 muls / 25 adds
  res[0]=a[0]*b[7]+a[2]*b[4]+a[4]*b[2]+a[7]*b[0]-a[1]*b[5]-a[5]*b[1];
  res[1]=a[0]*b[8]+a[3]*b[4]+a[4]*b[3]+a[8]*b[0]-a[1]*b[6]-a[6]*b[1];
  res[2]=a[0]*b[9]+a[3]*b[5]+a[5]*b[3]+a[9]*b[0]-a[2]*b[6]-a[6]*b[2];
  res[3]=a[1]*b[9]+a[3]*b[7]+a[7]*b[3]+a[9]*b[1]-a[2]*b[8]-a[8]*b[2];
  res[4]=a[4]*b[9]+a[6]*b[7]+a[7]*b[6]+a[9]*b[4]-a[5]*b[8]-a[8]*b[5];
  return res;
}

/*******************************************************************************
 * op_Bi_Tri
 * @argument {Bi} a
 * @argument {Tri} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator ^ (const Bi &a, const Tri &b) {
  Pent res;
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r0 e₁₂₃₄₅
  // 10 muls / 9 adds
  res[0]=a[0]*b[9]+a[2]*b[7]+a[4]*b[5]+a[6]*b[3]+a[7]*b[2]+a[9]*b[0]-a[1]*b[8]-a[3]*b[6]-a[5]*b[4]-a[8]*b[1];
  return res;
}

/*******************************************************************************
 * op_Bi_Quad
 * @argument {Bi} a
 * @argument {Quad} b
 * @returns {float}
 ******************************************************************************/
inline float operator ^ (const Bi &a, const Quad &b) {
  // a0 e₁₂ + a1 e₁₃ + a2 e₁₄ + a3 e₁₅ + a4 e₂₃ + a5 e₂₄ + a6 e₂₅ + a7 e₃₄ + a8 e₃₅ + a9 e₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}

/*******************************************************************************
 * op_Tri_Una
 * @argument {Tri} a
 * @argument {Una} b
 * @returns {Quad}
 ******************************************************************************/
inline Quad operator ^ (const Tri &a, const Una &b) {
  Quad res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂₃₄ + r1 e₁₂₃₅ + r2 e₁₂₄₅ + r3 e₁₃₄₅ + r4 e₂₃₄₅
  // 20 muls / 15 adds
  res[0]=a[0]*b[3]+a[3]*b[1]-a[1]*b[2]-a[6]*b[0];
  res[1]=a[0]*b[4]+a[4]*b[1]-a[2]*b[2]-a[7]*b[0];
  res[2]=a[1]*b[4]+a[5]*b[1]-a[2]*b[3]-a[8]*b[0];
  res[3]=a[3]*b[4]+a[5]*b[2]-a[4]*b[3]-a[9]*b[0];
  res[4]=a[6]*b[4]+a[8]*b[2]-a[7]*b[3]-a[9]*b[1];
  return res;
}

/*******************************************************************************
 * op_Tri_Bi
 * @argument {Tri} a
 * @argument {Bi} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator ^ (const Tri &a, const Bi &b) {
  Pent res;
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r0 e₁₂₃₄₅
  // 10 muls / 9 adds
  res[0]=a[0]*b[9]+a[2]*b[7]+a[3]*b[6]+a[5]*b[4]+a[7]*b[2]+a[9]*b[0]-a[1]*b[8]-a[4]*b[5]-a[6]*b[3]-a[8]*b[1];
  return res;
}

/*******************************************************************************
 * op_Tri_Tri
 * @argument {Tri} a
 * @argument {Tri} b
 * @returns {float}
 ******************************************************************************/
inline float operator ^ (const Tri &a, const Tri &b) {
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}

/*******************************************************************************
 * op_Tri_Quad
 * @argument {Tri} a
 * @argument {Quad} b
 * @returns {float}
 ******************************************************************************/
inline float operator ^ (const Tri &a, const Quad &b) {
  // a0 e₁₂₃ + a1 e₁₂₄ + a2 e₁₂₅ + a3 e₁₃₄ + a4 e₁₃₅ + a5 e₁₄₅ + a6 e₂₃₄ + a7 e₂₃₅ + a8 e₂₄₅ + a9 e₃₄₅
  // b0 e₁₂₃₄ + b1 e₁₂₃₅ + b2 e₁₂₄₅ + b3 e₁₃₄₅ + b4 e₂₃₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}

/*******************************************************************************
 * op_Quad_Una
 * @argument {Quad} a
 * @argument {Una} b
 * @returns {Pent}
 ******************************************************************************/
inline Pent operator ^ (const Quad &a, const Una &b) {
  Pent res;
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁ + b1 e₂ + b2 e₃ + b3 e₄ + b4 e₅
  // -> r0 e₁₂₃₄₅
  // 5 muls / 4 adds
  res[0]=a[0]*b[4]+a[2]*b[2]+a[4]*b[0]-a[1]*b[3]-a[3]*b[1];
  return res;
}

/*******************************************************************************
 * op_Quad_Bi
 * @argument {Quad} a
 * @argument {Bi} b
 * @returns {float}
 ******************************************************************************/
inline float operator ^ (const Quad &a, const Bi &b) {
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂ + b1 e₁₃ + b2 e₁₄ + b3 e₁₅ + b4 e₂₃ + b5 e₂₄ + b6 e₂₅ + b7 e₃₄ + b8 e₃₅ + b9 e₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}

/*******************************************************************************
 * op_Quad_Tri
 * @argument {Quad} a
 * @argument {Tri} b
 * @returns {float}
 ******************************************************************************/
inline float operator ^ (const Quad &a, const Tri &b) {
  // a0 e₁₂₃₄ + a1 e₁₂₃₅ + a2 e₁₂₄₅ + a3 e₁₃₄₅ + a4 e₂₃₄₅
  // b0 e₁₂₃ + b1 e₁₂₄ + b2 e₁₂₅ + b3 e₁₃₄ + b4 e₁₃₅ + b5 e₁₄₅ + b6 e₂₃₄ + b7 e₂₃₅ + b8 e₂₄₅ + b9 e₃₄₅
  // -> r
  // 0 muls / 0 adds
  return 0.;
}


